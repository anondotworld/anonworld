{"noir_version":"0.38.0+e784523a15c0c233a5a794f28498635b7ce86325","hash":1248964108642545654,"abi":{"parameters":[{"name":"signature","type":{"kind":"array","length":64,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"message_hash","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"pub_key_x","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"pub_key_y","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"storage_hash","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"storage_nodes","type":{"kind":"array","length":7,"type":{"kind":"array","length":532,"type":{"kind":"integer","sign":"unsigned","width":8}}},"visibility":"private"},{"name":"storage_leaf","type":{"kind":"array","length":69,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"storage_depth","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"},{"name":"storage_value","type":{"kind":"field"},"visibility":"private"},{"name":"chain_id","type":{"kind":"field"},"visibility":"private"},{"name":"block_number","type":{"kind":"field"},"visibility":"private"},{"name":"token_address","type":{"kind":"field"},"visibility":"private"},{"name":"balance_slot","type":{"kind":"field"},"visibility":"private"},{"name":"verified_balance","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"tuple","fields":[{"kind":"field"},{"kind":"field"},{"kind":"field"},{"kind":"field"},{"kind":"field"},{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}}]},"visibility":"public"},"error_types":{}},"bytecode":"","debug_symbols":"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jJ7jZfQcL6PneBk9x8seZ7yyxkuArHkR4DrjlV4/DqoxbgeYEfHjszPazx/Oce3DNc4frshXNXXlw6PGi4pR81WG5Q/pY1/ptq/0ua/0ta9031d67Cs995Ve+0rvbaXXvtW09q2mtW81rX2rae1bTWvfalr7VtPat5rWvtW09q2mvW817X2rae9bTXvfatr7VtPet5r2vtW0962mvW817W2r6Ty2rabz2LaazmPbajqPbavpPLatpvPYtprOY9tqOo9tq+k8tq2m89i3mo59q+nYt5qOfavp2Leajn2r6di3mo59q+nYt5qOfavp2Lea2r7V1PatprZvNbV9q6ntW01t32pq+1ZT27ea2r7V1PatpnPfajr3raZz32o6962mc99qOvetpnPfajr3raZz32o6962ma99quvatpmvfarr2raZr32q69q2ma99quvatpmvfarr2raauW02t/OXDVrkupetW09Nz80tH8Ok5NN5Kv/J39nzpObb2N19RXPmwH+f+4T/ee/72w3+7KLp1+gsviu4dwBdelPX7olxeFN27li+8KLr3Q194UXTvtL7woujew33hRdG9O/y6ixK6951feFF+39FeuSi/72ivXJTfd7RXLsr6fVEuL8rvO9orF+X3He2Vi/L7jvbKRfl9R3vlovy+o728KMKT+77wovy+o71yUX7f0V65KL/vaK9clPX7olxelN93tFcuyu872isX5fcd7ZWL8vuO9spF+X1He3lRhKdnfuFF+X1He+Wi/L6jvXJRft/RXrko6/dFubwov+9or1yU33e0Vy7K7zvaKxfl9x3tlYvy+4728qIIT7D9woty9Y62rF8uStSdi5I9z3/nOG5flGWePz68LOcd6et4uYK+bF1Kt32lz32lr32l+77SY1/pua/02ld67yp9XZ+Nu4f0bavpOratpuvYtpquY9tquo5tq+k6tq2m69i2mq5j22q6jn2r6di3mo59q+nYt5qOfavp2Leajn2r6di3mo59q+nYt5qOfaup7VtNbd9qavtWU9u3mtq+1dT2rab23Goax3qRHnZcqkkpNSWlppXUzOdWpnA/q8kraoaUGpNSM6XULCk1LuUpqVw8pXLxlMrFs5V+xUsqFy+pXLykcvGSysVLKhcvl1ITUmpSSk1JqZHKxS6Vi10qF7tULvapdEfhS0qN1H2xS90Xu1Qudqlc7FK5OKRycUjl4pDKxSF1XxxS98UhdV8cUvfFIZWLQyoXh1QuTqlcnEPpjiJNSo3UfXFK3RenVC5OqVycUrk4pXJxSuXiksrFJXVfXFL3xSV1X1xS98UllYtLKheXVC4uqVxcUhxFH1JqpO6LW+q+uKVycUvl4pbKxS2Vi1sqF7dULm6l+2I/lO6L/VC6L/ZD6b7YD6Vc7IdSLvZDKRf7oZSL/VBi2vxQYtr8ULov9qF0X+xDKhcPqVw8pHLxkMrFQyoXD6lcPJTui30o3Rf7kLovNqn7YpPKxSaVi00qF5tULjYlps2l+u5cqu/Opfru3KRysVTfnUv13blU351L9d25VN+dT6n74il1Xzyl7oun1H2xVN+dS/XduVTfnUv13flSYtr82X13d9RI3Rcvqftiqb47l+q7c6m+O5fqu3OpvjuX6rtzl7ovfnbf3R01UvfFLnVfLNV351J9dy7Vd+dSfXceSkybhxLT5iF1X/zsvrs7aqRysVTfnUv13blU351L9d25VN+dp9R9cUrdF6fUffGz++7uqJHKxVJ9dy7Vd+dSfXeeUkxbSTFtJXVfXFL3xVJ9dy7Vd+dSfXcu1XfnUn13LtV35yV1X9xS98UtdV/cUvfFUn13LtV351J9dy7Vd+ctxbS1FNPWSvfFcSjdF4dU311I9d2FVN/d6XuUUqOUi0Oq7y4OpfviOJTui+NQui+OoXRfHFJ9dyHVdxdSfXch1XcXQ4lpi6HEtMVQui+OoXRfHFJ9dyHVdxdSfXch1XcXUn13IdV3FyZ1X2xS98UmdV9sUvfFUn13IdV3F1J9dyHVdxdTiWmLZ/fd3VEjdV8s9b67kOq7C6m+u5DquwupvruQ6rsLqb67kHrfXUi97y6k3ncXUu+7C6m+u5DquwupvruQ6rsLV2LawpWYtpB6311Ive8upPruQqrvLqT67kKq7y6k+u5Cqu8upN53F1Lvuwup992F1PvuQqrvLqT67kKq7y6k+u4ipJi2lGLapN53F1LvuwupvruQ6rsLqb67kOq7C6m+u5Dquwup992F1PvuQup9dyH1vruQ6rsLqb67kOq7C6m+uygppq2kmDap992F1PvuQqrvLqT67kKq7y6k+u5Cqu8upPruQup9dyH1vruQet9dSr3vLqX67lKq7y6l+u7yUMrFeSgxbXkoMW0p9b67lHrfXUr13aVU311K9d2lVN9dSvXdpVTfXUq97y6l3neXUu+7S6n33aVU311K9d2lVN9dSvXdpSkxbfnsvrs7aqTui6Xed5dSfXcp1XeXUn13KdV3l1J9dynVd5dS77tLqffdpdT77lLqfXcp1XeXUn13KdV3l1J9d7mUmLZcSkxbSr3vLqXed5dSfXcp1XeXUn13KdV3l1J9dynVd5dS77tLqffdpdT77lLqfXcp1XeXUn13KdV3l1J9d+lKTFuGEtOWUu+7S6n33aVU311K9d2lVN9dSvXdpVTfXUr13aXU++5S6n13KfW+u5R6311K9d2lVN9dSvXdpVTfXaYU05ZSTJvU++5S6n13KdV3l1J9dynVd5dSfXcp1XeXUn13KfW+u5R6311Kve8upd53l1J9dynVd5dSfXcp1XeXLcW0tRTTJvW+u5R6311K9d2VVN9dSfXdlVTfXUn13dWhlItL6n13JfW+u5J6311Jve+upPruSqrvrqT67kqq766GEtNWz+67u6NG6b64pN53V1J9dyXVd1dSfXcl1XdXUn13JdV3V1Lvuyup992V1PvuSup9dyXVd1dSfXcl1XdXUn13NZWYtppKTFtJve+upN53V1J9dyXVd1dSfXcl1XdXUn13JdV3V1Lvuyup992V1PvuSup9dyXVd1dSfXcl1XdXUn13tZSYtnIlpq2k3ndXUu+7K6m+u5LquyupvruS6rsrqb67kuq7K6n33ZXU++5K6n13JfW+u5LquyupvruS6rsrqb67CiWmrUKJaSup992V1PvuSqrvrqT67kqq766k+u5Kqu+upPruSup9dyX1vruSet9dSb3vrqT67kqq766k+u5Kqu+uSoppKymmTep9dyX1vruS6rsrqb67kuq7K6m+u5LquyupvruSet9dSb3vrqTed1dS77srqb67luq7a6m+u5bqu+tDiWnrY0mpUbovbqn33bVU311L9d21VN9dS/XdtVTfXUv13bXU++5a6n13LfW+u5Z6311L9d21VN9dS/XdtVTfXZsS09amxLS11PvuWup9dy3Vd9dSfXct1XfXUn13LdV311J9dy31vruWet9dS73vrqXed9dSfXct1XfXUn13LdV311OJaeulxLS11PvuWqrvrqX67lqq766l+u5aqu+upfrueilxFC3Vd9dSfXct9b67lnrfXUv13bVU311L9d21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9q/B/jXYvwb712D/GuzfCft3wv6dsH8n7N8J+3fC/p2wfyfs3wn79/G+t54vS1Ht6+35r6xa9fHyrDN69Ot5r3329Gjy8tlTFX/z2b/qfrzz7Yt0j01126a656a616a6fVPdsanu3FR3bap703rpm9ZLf2q9rH7VbX2hZdMa6JvWwMc73b5I96Y10EPIa5vWNd+0rvmmdS02rWshVNdi07oWm9a1x7vUvkj3pnUthOpabFrXYtO6FpvWtdy0rqVQXctN61puWtce7zD7It2b1rUUqmu5aV3LTetablrXatO6VkJ1rTata7VpXXu8O+yLdG9a10qortWmda02rWu1aV3rTetaC9W13rSu9aZ17fHeti/SvWlda6G61pvWtd60rvWedc2OPeuaHTp1zY4965ode9Y1O/asa3bsWdfs0KlrduxZ1+zYs67ZsWldG5vWtSFU18amdW1sWtce74X+It2b1rUhVNfGpnVtbFrXxqZ1zTatayZU12zTumab1rXHZwR8ke5N65oJ1TXbtK7ZpnXNNq1rc9O6NoXq2ty0rs1N69rjszO+SPemdW0K1bW5aV2bm9a1TeeY2KZzTGwJ1bVNZ5PYprNJbNPZJLbpbBJbQnVt03kjtum8Edt03ohtOm/EhOaN2KbzRmzTeSO26bwR23TeiAnNG7FN543YpvNGbNN5I7bpvBETmjdim84bsU3njdim80Zs03kjJjRvxDadN2KbzhuxTeeN2KbzRkxo3ohtOm/ENp03YpvOG7FN542Y0LwR23TeiG06b8Q2nTdim84bMaF5I7bpvBHbdN6IbTpvxDadN2JC80Zs03kjtum8Edt03ohtOm/EhOaN2KbzRmzTeSO26bwR23TeiAnNGzFw3sjfzl/w+R+uE+MIO39Zh/85wnx80sbdCAOPYHiEiUdYeATHIwQeIfEIhUfAPT1wTw/c0wP39MA9/Xjn/N0IuKcH7umBe3rgnh64pw33tOGeNtzThnvacE8b7mnDPW24pw33tOGenrinJ+7piXt64p6euKcn7umJe3rinp64pyfu6YV7euGeXrinF+7phXt64Z5euKcX7umFe3rhnnbc04572nFPP95/c1pNfo2w7DLCwiM4HiHwCI972qJePmx1vI1w+eHT80r8+PDptv+NnB9qSkpNK6l5vKvjU9UMKTUmpWZKqVnPVXPS8KLmdNfzRs3lZ9c4K18j/UK5b6s8tlWe2yqvbZX3rsof78gYp/X2lw+fHrgv7k8e7524G8HwCBOP8HiOn3WOcPrSLyM4HiHwCIlHKDxC0xHqwCMMPILhESYeAfd04Z4u3NOFe7pwTxfu6cY93binG/d0455u3NONe7pxTzfu6cY93bSn13HgEQYewfAIE4+w8AiORwg8wuOeXjnOEfq4jFB4hKYjfAKLeS/CwCM87unbexZrTDzCwiM4HiHwCIlHKDxC0xE+gcW8F2HgEXBPG+5pwz1tuKcN97Thnjbc04Z7euKenrinJ+7piXt64p6euKcn7umJe3rinp64pxfu6YV7euGeXrinF+7phXt64Z5euKcX7umFe9pxTzvuacc9jbOYC2cxF85iLpzFXI572nFPO+7pwD0duKcD93Tgng7c04F7OnBPB+7pwD0duKcT93Tink7c04l7OnFPJ+7pxD2duKcT93Tini7c04V7unBPF+7pwj1duKcL93Thni7c04V7unFPN+7pxj3duKcb93Tjnm7c0417unFPN+1pPw48wsAjGB5h4hEWHsHxCIFHSDxC4RFwTw/c0wP3NM6ROc6ROc6ROc6ROc6ROc6ROc6ROc6ROc6ROc6ROc6ROc6ROc6ROc6ROc6ROc6ROc6ROc6ROc6ROc6ROc6ROc6ROc6ROc6ROc6ROc6ROc6ROc6ROc6ROc6ROc6ROc6ROc6ROc6ROc6ROc6ROc6ROc6ROc6ROc6ROc6ROc6ROc6ROc6ROc6ROc6ROc6ROc6ROc6ROc6ROc6ROc6ROc6ROc6ROc6ROc6ROc6ROc6ROc6ROc6ROc6ROc6ROc6ROc6ROc6ROc6ROc6ROc6ROc6ROc6ROc6ROc6ROc6ROc6ROc6ROc6ROc6ROc6ROc6ROc6ROc6ROc6ROc6ROc6ROc6ROc6ROc6ROc6RBc6RBc6RBc6RBc6RxbHwCI5HCDxC4hEKj4B7GufIAufIAufIAufIAufIAufIAufIAufIAufIAufIAufIAufIAufIAufIAufIAufIAufIAufIAufIAufIAufIAufIAufIAufIAufIAufIAufIAufIAufIAufIAufIAufIAufIAufIAufIAufIAufIAufIAufIAufIAufIAufIAufIAufIAufIAufIAufIAufIAufIAufIAufIAufIAufIAufIAufIAufIAufIAufIAufIAufIAufIAufIAufIAufIAufIAufIAufIAufIAufIAufIAufIAufIAufIAufIAufIAufIAufIAufIAufIAufIAufIAufIAufIAufIAufIAufIAufIAufIAufIAufIEufIEufIEufIEufI8lh4BMcjBB4h8QiFR8A9jXNkiXNkiXNkiXNkiXNkiXNkiXNkiXNkiXNkiXNkiXNkiXNkiXNkiXNkiXNkiXNkiXNkiXNkiXNkiXNkiXNkiXNkiXNkiXNkiXNkiXNkiXNkiXNkiXNkiXNkiXNkiXNkiXNkiXNkiXNkiXNkiXNkiXNkiXNkiXNkiXNkiXNkiXNkiXNkiXNkiXNkiXNkiXNkiXNkiXNkiXNkiXNkiXNkiXNkiXNkiXNkiXNkiXNkiXNkiXNkiXNkiXNkiXNkiXNkiXNkiXNkiXNkiXNkiXNkiXNkiXNkiXNkiXNkiXNkiXNkiXNkiXNkiXNkiXNkiXNkiXNkiXNkiXNkiXNkiXNkiXNkiXNkiXNkiXNkiXNkhXNkhXNkhXNkhXNkdSw8guMRAo+QeITCI+CexjmywjmywjmywjmywjmywjmywjmywjmywjmywjmywjmywjmywjmywjmywjmywjmywjmywjmywjmywjmywjmywjmywjmywjmywjmywjmywjmywjmywjmywjmywjmywjmywjmywjmywjmywjmywjmywjmywjmywjmywjmywjmywjmywjmywjmywjmywjmywjmywjmywjmywjmywjmywjmywjmywjmywjmywjmywjmywjmywjmywjmywjmywjmywjmywjmywjmywjmywjmywjmywjmywjmywjmywjmywjmywjmywjmywjmywjmywjmywjmywjmywjmywjmywjmywjmywjmywjmywjmywjmywjmyxjmyxjmyxjmyxjmyPhYewfEIgUdIPELhEXBP4xxZ4xxZ4xxZ4xxZ4xxZ4xxZ4xxZ4xxZ4xxZ4xxZ4xxZ4xxZ4xxZ4xxZP86Rec0fn/WOy/M7fP6Az5/w+R/2cvTLZ3PU5fmbPf/j7Nid8w/4/A97OGe/nL/m5fknfP4Fn9/h8wd8/of9e1r6/fHZ023i5fkLPn+z53+cE7tz/gGf3+DzT/j8Cz6/w+cP+Pywfxfs3wX712H/Ouxfh/3rsH8d9q/D/nXYvw7712H/OuzfgP0bsH8D9m/A/g3YvwH7N2D/BuzfgP0bsH8fZ71Oj6Av5/f19vxXFnNOi+0v5z2t0b2e9+rCz5HnhR873nz2b7rHprptU91zU91rU92+qe7YVHduqrs21d176q5N62VtWi/rqfWy+lW39YWWTWvg48zpF+netAbWpjWwUshrm9a12rSu9aZ1rTetay1U13rTuvY4d/1Fujeta71pXWuhutab1rXesq7VcWxZ1066t6xrJ90yde2kZcu6dtK9ZV076d6yrp10b1nXTrpl6tpJy5Z17aR707o2Nq1rY9O6NoTq2ti0rj3ef/NFujeta2PTujaE6trYtK6NTeuabVrXbNO6ZkJ1zTata4/3oH2R7k3rmm1a10yortmmdc02rWtz07o2N61rU6iuzU3r2uO9mV+ke9O6Njeta1Oors1N69rctK6tTeva2rSuLaG6tjata4/3LH+R7k3r2tq0ri2hurY2rWtr07rmm9Y137SuuVBd803r2uO9/F+ke9O65pvWNReqa75pXfNN61psWtdi07oWQnUtNq1rj8+4+CLdm9a12LSuhVBdi03rWmxa1/acY3LSvWldS6G6tudskpPuTevanrNJTro3rWspVNf2nDdy0r1pXdtz3shJ96Z1TWfeyEnLpnVtz3kjJ92b1rU9542cdAvVtT3njZx0b1rX9pw3ctK9aV3TmTdy0rJpXdtz3shJ96Z1bc95IyfdQnVtz3kjJ9171rWx6byRsem8kSE0b2RsOm9kHHvWtbHpvJGx6byRITRvZGw6b2RsOm9kbDpvZGw6b2QIzRsZm84bGZvOGxmbzhsZm84bGULzRsam80bGpvNGxqbzRsam80aG0LyRsem8kbHpvJGx6byRsem8kSE0b2SA80b+dv5mz//4/I7TY7+dv6zDLyMMPILhESYeYeERHI8QeITEIxQeoekIC/f0wj29cE8v3NML9/TCPb1wTy/c0wv39MI97binHfe045523NOOe9pxTzvuacc97binHfd04J4O3NOBezpwTwfu6cA9HbinA/d04J4O3NOJezpxTyfu6cQ9nbinE/d04p5O3NOJezpxTxfu6cI9XbinC/f04/03p9Xk1wjLLiM4HiHwCIlHeNzTNo6XD5vVZYSmIzzep3E3wsAjGB7hcU9b1DlCHW8jXH54msePD0/LNz+8H2qWlBqXUhNSalJKTT1XzUnDi5q53pSxK59d46x8ne4oL5T3psrtOLZVPrZVbtsqn9sqf7wmzXFWPmf/uQbb490AdyMEHiHxCI/n+FnnCKcv/TJC0xEeZ9HvRhh4BMMjTDzCwiM4HiHwCIlHwD09cE8b7mnDPW24pw33tOGeNtzThnvacE8b7mnDPT1xT0/c0xP39MQ9PXFPT9zTE/f0xD09cU9P3NML9/QnMJNrznOElZcRDI8w8QiPe3rlOEfo4zKC4xECj5B4hMIjNP1b+gRm8l4E3NOOe9pxT38CM3kvguMRAo+QeITCI+Ce/gRm8vbutn0CM3kvguERJh5h4REcjxB4hMQjFB6h6QiJezpxTyfu6cQ9nbinE/d04p5O3NOJezpxTxfu6cI9XbinC/c0zkwazkwazkwazkxa4Z4u3NONe7pxTzfu6cY93binG/d0455u3NONe7ppT8/jwCMMPILhESYeYeERHI8QeITEIxQeAff0wD09cE8P3NMD9/TAPT1wTw/c0wP39MA9PXBPG+5pwz1tuKcN97Thnjbc04Z72nBPG+5pwz09cU9P3NMT9/TEPT1xT0/c0xP39MQ9PXFPT9zTC/f0wj29cE8v3NML9/TCPb1wTy/c0wv39MI97binHfe045523NOOe9pxTzvuacc97binHfc0zpFNnCObOEc2cY5s4hzZxDmyiXNkE+fIJs6RTZwjmzhHNnGObOIc2cQ5solzZBPnyCbOkU2cI5s4RzZxjmziHNnEObKJc2QT58gmzpFNnCObOEc2cY5s4hzZxDmyiXNkE+fIJs6RTZwjmzhHNnGObOIc2cQ5solzZBPnyBbOkS2cI1s4R7ZwjmwdC4/geITAIyQeofAIuKdxjmzhHNnCObKFc2QL58gWzpEtnCNbOEe2cI5s4RzZwjmyhXNkC+fIFs6RLZwjWzhHtnCObOEc2cI5soVzZAvnyBbOkS2cI1s4R7ZwjmzhHNnCObKFc2QL58gWzpEtnCNbOEe2cI5s4RzZwjmyhXNkC+fIFs6RLZwjWzhHtnCObOEc2cI5soVzZAvnyBbOkS2cI1s4R7ZwjmzhHNnCObKFc2QL58gWzpEtnCNbOEe2cI5s4RzZwjmyhXNkC+fIFs6RLZwjWzhHtnCObOEc2cI5soVzZAvnyBbOkS2cI1s4R7ZwjmzhHNnCObKFc2QL58gWzpEtnCNbOEe2cI5s4RzZwjmyhXNkC+fIFs6RLZwjWzhHtnCObOEcmeMcmeMcmeMcmeMcmR8Lj+B4hMAjJB6h8Ai4p3GOzHGOzHGOzHGOzHGOzHGOzHGOzHGOzHGOzHGOzHGOzHGOzHGOzHGOzHGOzHGOzHGOzHGOzHGOzHGOzHGOzHGOzHGOzHGOzHGOzHGOzHGOzHGOzHGOzHGOzHGOzHGOzHGOzHGOzHGOzHGOzHGOzHGOzHGOzHGOzHGOzHGOzHGOzHGOzHGOzHGOzHGOzHGOzHGOzHGOzHGOzHGOzHGOzHGOzHGOzHGOzHGOzHGOzHGOzHGOzHGOzHGOzHGOzHGOzHGOzHGOzHGOzHGOzHGOzHGOzIt+p7zXwCMYHmHiERYewfEIuKdxjsxxjsxxjsxxjsxxjsxxjsxxjsxxjsxxjsxxjsxxjsxxjsxxjixwjixwjixwjixwjiyOhUdwPELgERKPUHgE3NM4RxY4RxY4RxY4RxY4RxY4RxY4RxY4RxY4RxY4RxY4RxY4RxY4RxY4RxY4RxY4RxY4RxY4RxY4RxY4RxY4RxY4RxY4RxY4RxY4RxY4RxY4RxY4RxY4RxY4RxY4RxY4RxY4RxY4RxY4RxY4RxY4RxY4RxY4RxY4RxY4RxY4RxY4RxY4RxY4RxY4RxY4RxY4RxY4RxY4RxY4RxY4RxY4RxY4RxY4RxY4RxY4RxY4RxY4RxY4RxY4RxY4RxY4RxY4RxY4RxY4RxY4RxY4RxY4RxY4Rxb4PLLA55EFPo8s8Hlkgc8jC3weWeAcWeAcWeAcWeAcWeAcWeAcWeAcWeAcWeAcWeAcWeAcWeAcWeAcWeAcWeIcWeIcWeIcWeIcWR4Lj+B4hMAjJB6h8Ai4p3GOLHGOLHGOLHGOLHGOLHGOLHGOLHGOLHGOLHGOLHGOLHGOLHGOLHGOLHGOLHGOLHGOLHGOLHGOLHGOLHGOLHGOLHGOLHGOLHGOLHGOLHGOLHGOLHGOLHGOLHGOLHGOLHGOLHGOLHGOLHGOLHGOLHGOLHGOLHGOLHGOLHGOLHGOLHGOLHGOLHGOLHGOLHGOLHGOLHGOLHGOLHGOLHGOLHGOLHGOLHGOLHGOLHGOLHGOLHGOLHGOLHGOLHGOLHGOLHGOLHGOLHGOLHGOLB/nyLxeBjx5x+X5mz3/4wzZnfMP+PwPezn65bOnTYzL80/4/As+v8Pnf9jDpwWjl/PXvDx/wucv+PzNnv9xXuzO+R/2b9Xx47M9xuX5DT7/hM+/4PM7fP6Az5/w+Qs+f6Pnr8fZsDvnH/D5DT7/hM+/4PM7fP6Az5/w+Qs+P+zfAft3wP4dsH8H7N8B+3fA/h2wfwfs3wH7d8D+Ndi/BvvXYP8a7N/HWa+eLws07evt+a8s5vTx8qwzevTrea8u/Bx5Xvix481n/6bbN9Udm+rOTXXXprp7T92P835fpHtsqts21T031b1pvZyb1sv51HpZ/arb+kLLpjVwbloD56Y1cG1aA9fQ8dratK6tTeva4yzxF+netK4tobq2Nq1ra9O6tjata75pXXOhuuab1jXftK49ztN/ke5N65oL1TXftK75pnXNN61rsWldC6G6FpvWtdi0rj3eU/JFujetayFU12LTuhab1rXYtK7lpnUthepablrXctO69nhf1Rfp3rSupVBdy03rWm5a13LTulab1rUSqmu1aV2rTeva432GX6R707pWQnWtNq1rtWldq03rWm9a11qorvWmda03rWuP999+ke5N61oL1bXetK71pnWt96xrfexZ1/rQqWt97FnX+tizrvWxZ13rY8+61odOXetjz7rWx551rY9N69rYtK4Nobo2Nq1rY9O69vi8hi/SvWldG0J1bWxa18amdW1sWtds07pmQnXNNq1rtmld23SOSW86x6RNqK5tOpukN51N0pvOJulNZ5P0FKprm84b6U3njfSm80Z603kjLTRvpDedN9KbzhvpTeeN9KbzRlpo3khvOm+kN5030pvOG+lN54200LyR3nTeSG86b6Q3nTfSm84baaF5I73pvJHedN5IbzpvpDedN9JC80Z603kjvem8kd503khvOm+kheaN9KbzRnrTeSO96byR3nTeSAvNG+lN5430pvNGetN5I73pvJEWmjfSm84b6U3njfSm80Z603kjLTRvpDedN9KbzhvpTeeN9KbzRlpo3kiD80b+dv4Jn//hOjGOsPOXdfhlBMcjBB4h8QiFR2g6wuNzHu5GGHgEwyNMPALu6cY93binG/d0455u2NN9HAceYeARDI8w8QgLj+B4hMAjJB6h8Ai4pwfu6YF7euCeHrinB+7pgXt64J4euKcH7umBe9pwTxvuacM9bbinDfe04Z423NOGe9pwTxvu6Yl7euKenrinJ+7piXt64p6euKcn7unH+29Oq8mv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eFYteFYteFYteFYteFYteFYteFYteFYteFYteFYteFYteFYteFYteFYteFYteFYteFYteFYteFYteFYteFYteFYteFYteFYteFYteFYteFYteFYteFYteFYteVYteVYteVYteVYtj8WHcD5E8CGSD1F8CN7dPKuWPKuWPKuWPKuWPKuWPKuWPKuWPKuWPKuWPKuWPKuWPKuWPKuWPKuWPKuWPKuWPKuWPKuWPKuWPKuWPKuWPKuWPKuWPKuWPKuWPKuWPKuWPKuWPKuWPKuWPKuWPKuWPKuWPKuWPKuWPKuWPKuWPKuWPKuWPKuWPKuWPKuWPKuWPKuWPKuWPKuWPKuWPKuWPKuWPKuWPKuWPKuWPKuWPKuWPKuWPKuWPKuWPKuWPKuWPKuWPKuWPKuWPKuWPKuWPKuWPKuWPKuWPKuWPKuWPKuWPKuWPKuWPKuWPKuWPKuWPKuWPKuWPKuWPKuWPKuWPKuWPKuWPKuWPKuWPKuWPKuWPKuWPKuWPKuWPKtWPKtWPKtWPKtWPKtWx+JDOB8i+BDJhyg+BO9unlUrnlUrnlUrnlUrnlUrnlUrnlUrnlUrnlUrnlUrnlUrnlUrnlUrnlUrnlUrnlUrnlUrnlUrnlUrnlWrT2DV7rwivD6BVbsbwvgQkw+x+BC8u3lWrXhWrXhWrXhWrXhWrXhWrXhWrXhWrXhWrXhWrXhWrXhWrXhWrXhWrXhWrXhWrXhWrXhWrXhWrXhWrXhWrXhWrXhWrXhWrXhWrXhWrXhWrXhWrXhWrXhWrXhWrXhWrXhWrXhWrXhWrXhWrXhWrXhWrXhWrXhWrXhWrXhWrXhWrXhWrXhWrXhWrXhWrXhWrXhWrXhWrXhWrXhWrXhWrXhWrXhWrXhWrXhWrXhWrXhWrXhWrXhWrXhWrXhWrXhWrXlWrXlWrXlWrXlWrY/Fh3A+RPAhkg9RfAje3Tyr1jyr1jyr1jyr1jyr1jyr1jyr1jyr1jyr1jyr1jyr1jyr1jyr1jyr1jyr1jyr1jyr1jyr1jyr1jyr1vxctebnqjU/V635uWrNz1VrnlVrnlVrnlVrnlVrnlVrnlVrnlVrnlVrnlVrnlVrnlVrnlVrnlVrnlVrnlVrnlVrnlVrnlVrnlVrnlVrnlVrnlVrnlVrnlVrnlVrnlVrnlVrnlVrnlVrnlVrnlVrnlVrnlVrnlVrnlVrnlVrnlVrnlVrnlVrnlVrnlVrnlVrnlVrnlVrnlVrnlVrnlVrnlVrnlVrnlVrnlVrnlVrnlVrnlVrnlVrnlVrnlVrnlVrnlVrnlVrnlVrnlVrnlVrnlVrnFWbB86qnUIMPoTxISYfYvEhnA8RfIjkQxQfgnf34N09eHcP3t2Dd/fg3T14dw/e3YN39+DdPXh3G+9u491tvLuNd7fx7jbe3ca7+xNYtTjWy4fD8kqI4kM0HuITWLVYxzlErSshHnd3vo4Ly7gWwvgQkw+x+BDOhwg+RPIhig/ReIhPYNXuhuDdvXh3L97di3f34t29eHcv3t2Ld/fi3e28u513t/Pudt7dzrvbeXc7727n3e28u513d/DuDt7dwbs7eHd/AquWmS8frmNeCeF8iOBDJB+i+BCNh/gEVu1uiMGHMD7E5EPw7k7e3cm7O3l3J+/u5N1dvLuLd3fx7i7e3cW7u3h3F+/u4t1dvLuLd3fz7m7e3c27u3l3N+/u5t39Caxa5XkXpse1EMmHKD5E0yHGJ7Bqd0MMPoTxIR53d1ucQyy/EuJhd9tJ5o8P25jX/gr/hBD1GsKuhAg+RPIXqvi/ovEQj7Nqdy/U46za/b/C+BCTv1CL/yt4d4/gL1TyfwXv7tH4hbID/yuMd7cZf6Em/1fw7jbnLxRfu413txV/ofjaPXl3z4FfqMnX7sm7ey7+QvG1e/Lunvyd+eRr9+Tdvfg788XX7sW7e/F35mvxfwXv7sXfmS++di/e3Yu/M3e+djvvbufvzJ2v3c672/k7c+drt/Pudv7O3PnaHby7g78zD752B+/uWPyF4mt38O4O/s48+NodvLuTvzNPvnYn7+7k78xz8X8F7+7k78yTr93Juzv5O/Pia3fx7i7+zrz42l28u4u/My++dhfv7uLvzIuv3c27u/k78/4Ed2e/hDiFexviCpeyztMF4k3P/Lry0WkvkMy0ePvRH8LnrsLXrsJ9V+EhK3y9JIDpdUV47iq8dIWvm8J7T+F2HHua046xq/BNK6cdm1ZOO3Qr5810aIdu5bwjXLhy3k6HwpXztnDdynnHnLqV87bwsWvlHLtWzqFbOW+nw6FbOe8IF66cN9PhEK6ct4XrVs475tStnHeE71o5x66V03Qr5+10aLqV845w4cp5Mx2acOW8LVy3ct4x56artWa7Vk7btXKa8Grt7XQovFp7U/gUrpw30+EUrpy3he+6Wjt3Xa39jD6mrxG+a+Wcm+5z2tx0n9PmpvucNnfd51y7rtauXVdr166Vc+1aOT+jR/BL0uHadZ9z7brPuXbd51y7rtauXVdrfdfK6btWTt91n9N33ef8jP7bL0mHvus+p++6Wuu7rtb6rpXTd62cses+Z+y6zxm77nPGrvucn9Hb/jXm3HW1NnatnLFr5Yxd9zlj133O3HWfM3fd58xdV2tz19Xaz5gb8TXCd62cues+Z+66z5m77nPmrvuctetqbe26Wlu7Vs7atXJ+xkyWL0mHtes+Z+26z1m77nPWrqu1tetqbe9aOXvXyik8Q+h2OhSeIXRHuHDlvJkOhWcI3RG+62qt8AyhO8J3rZzCM4RuCp/CM4RupsMpPEPojvBN9zmn8AyhO8J1K+cdc266WjuFZwjdEb5p5ZzCM4TupMNN9zmn8Ayh2+lQeIbQHeGbrtZO4RlCd4TvWjmFZwjdEb7pPucUniF0R/im+5xTeIbQbeHCM4Rum1N4htAd4btWTuEZQneE61bO2+lQeIbQHeGb7nNO4RlCd4Rvulo7hWcI3RYuPEPojvBdK6fwDKHb6VB4htAd4cKV82Y6FJ4hdEf4rqu1wjOE7gjftXIKzxC6LVx4htDtdCg8Q+iO8F33OYVnCN0Rrls575hz19Va4RlCd4TvWjmFZwjdSYe77nMKzxC6nQ6FZwjdEb7raq3wDKE7wnetnMIzhO4I33WfU3iG0B3hu+5zCs8Qui1ceIbQbXMKzxC6I3zXyik8Q+iOcN3KeTsdCs8QuiN8131O4RlCd4TvulorPEPotnDhGUJ3hO9aOYVnCN1Oh8IzhO4IF66cN9Oh8AyhO8J3Xa0VniF0R/iulVN4htBt4cIzhG6nQ+EZQneE77rPKTxD6I5w3cp5x5y7rtYKzxC6I3zXyik8Q+hOOtx1n1N4htDtdCg8Q+iO8F1Xa4VnCN0RvmvlFJ4hdEf4rvucwjOE7gjfdZ9TeIbQTeFLeIbQTXMu4RlCd4RvWjmX8AyhO8J1K+fNdLiEZwjdEb7pPucSniF0R/imq7VLeIbQbeHCM4TuCN+1cgrPELqdDoVnCN0RLlw5b6ZD4RlCd4Rvulq7hGcI3RG+a+UUniF0W7jwDKHb6VB4htAd4Zvucy7hGUJ3hOtWzjvm3HS1dgnPELojfNfKKTxD6E463HSfcwnPELqdDoVnCN0R/njltJVn4W/VjJcQkw+x+BDOh3g8w1vaOUTblRDJhyg+ROMhPmEmi614DTGvhHg8Z5zWAV5CrLWuhDA+xORDLD7E4+5e9XIzYX5c+0UFHyL5EMWH6E/9uq0uQ3zC3Ii7IXh3O+9u593tvLudd7fz7nbe3c6723l3B+/u4N0dvLuDd3fw7g7e3cG7O3h3B+/u4N2dvLuTd3fy7k7e3cm7O3l3J+/u5N2dvLuTd3fx7i7e3cW7u3h3F+/u4t1dvLuLd3fx7i7e3c27u3l3N+/u5t3dvLubd3fz7m7e3c27u3F3+3HwIXB3+2F8iMmHWHwI3N1+BB8i+RDFh+DdPXh3D97dg3f34N09eHcP3t2Dd/fg3T14dw/e3ca723h3G+9u491tvLuNd7fx7jbe3ca723h3T97dk3f35N09eXdP3t2Td/fk3T15d0/e3ZN39+LdzbNqzrNqzrNqzrNqzrNqzrNqzrNqzrNqzrNqzrNqzrNqzrNqzrNqzrNqzrNqzrNqzrNqzrNqzrNqzrNqzrNqzrNqzrNqzrNqzrNqzrNqzrNqzrNqzrNqzrNqzrNqzrNqzrNqzrNqzrNqzrNqzrNqzrNqzrNqzrNqzrNqzrNqzrNqzrNqzrNqzrNqzrNqzrNqzrNqzrNqzrNqzrNqzrNqzrNqzrNqzrNqzrNqzrNqzrNqwbNqwbNqwbNqwbNqcSw+BO7u4Fm14Fm14Fm14Fm14Fm14Fm14Fm14Fm14Fm14Fm14Fm14Fm14Fm14Fm14Fm14Fm14Fm14Fm14Fm14Fm14Fm14Fm14Fm14Fm14Fm14Fm14Fm14Fm14Fm14Fm14Fm14Fm14Fm14Fm14Fm14Fm14Fm14Fm14Fm14Fm14Fm14Fm14Fm14Fm14Fm14Fm14Fm14Fm14Fm14Fm14Fm14Fm14Fm14Fm14Fm14Fm14Fm14Fm14Fm14Fm14Fm14Fm14Fm14Fm14Fm14Fm14Fm14Fm14Fm14Fm14Fm14Fm14Fm14Fm14Fm14Fm14Fm14Fm14Fm14Fm14Fm14Fm14Fm14Fm14Fm14Fm14Fm14Fm14Fm14Fm14Fm14Fm14Fm14Fm15Fm15Fm15Fm15Fm1PBYfAnd38qxa8qxa8qxa8qxa8qxa8qxa8qxa8qxa8qxa8qxa8qxa8qxa8qxa8qxa8qxa8qxa8qxa8qxa8qxa8qxa8qxa8qxa8qxa8qxa8qxa8qxa8qxa8qxa8qxa8qxa8qxa8qxa8qxa8qxa8qxa8qxa8qxa8qxa8qxa8qxa8qxa8qxa8qxa8qxa8qxa8qxa8qxa8qxa8qxa8qxa8qxa8qxa8qxa8qxa8qxa8qxa8qxa8qxa8qxa8qxa8qxa8qxa8qxa8qxa8qxa8qxa8qxa8qxa8qxa8qxa8qxa8qxa8qxa8qxa8qxa8qxa8qxa8qxa8qxa8qxa8qxa8qxa8qxa8qxa8qxa8qxa8qxa8qxa8qxa8qxa8qxa8qxa8qxa8qxa8axa8axa8axa8axaHYsPgbu7eFateFateFateFateFateFateFateFateFateFateFateFateFateFateFateFateFateFateFateFateFateFateFateFateFateFateFateFateFateFateFateFateFateFateFateFateFateFateFateFateFateFateFateFateFateFateFateFateFateFateFateFateFateFateFateFateFateFateFateFateFateFateFateFateFateFateFateFateFateFateFateFateFateFateFateFateFateFateFateFateFateFateFateFateFateFateFateFateFateFateFateFateFateFateVateVateVateVatj8WHwN3dPKvWPKvWPKvWPKvWPKvWPKvWPKvWPKvWPKvWPKvWPKvWPKvWPKvWPKvWPKvWPKvWPKvWPKvWPKvWPKvWPKvWPKvWPKvWPKvWPKvWPKvWPKvWPKvWPKvWPKvWPKvWPKvWPKvWPKvWPKvWPKvWPKvWPKvWPKvWPKvWPKvWPKvWPKvWPKvWPKvWPKvWPKvWPKvWPKvWPKvWPKvWPKvWPKvWPKvWPKvWPKvWPKvWPKvWPKvWPKvWPKvWPKvWPKvWPKvWPKvWPKvWPKvWPKvWPKvWPKvWPKvWPKvWPKvWPKvWPKvWPKvWPKvWPKvWPKvWPKvWPKvWPKvWPKvWPKvWPKvWPKvWPKvWPKvWPKvWPKvWPKvWPKvWPKvWOKu2DpxVO4Wg3X0KYXyIyYdYfAja3acQwYdIPkTxIXh3D97dg3f34N09eHcP3t2Dd/fg3T14dw/e3YN3t/HuNt7dxrvbeHcb727j3W28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","file_map":{"6":{"source":"use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: StructDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: StructDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                let result_i = self[i].cmp(other[i]);\n\n                if result_i == Ordering::less() {\n                    result = result_i;\n                } else if result_i == Ordering::greater() {\n                    result = result_i;\n                }\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                let result_i = self[i].cmp(other[i]);\n\n                if result_i == Ordering::less() {\n                    result = result_i;\n                } else if result_i == Ordering::greater() {\n                    result = result_i;\n                }\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n","path":"std/cmp.nr"},"7":{"source":"use crate::{cmp::Eq, convert::From};\n\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\n/// slices - and thus nested vectors as well - are disallowed).\n///\n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\n/// pushing an additional element is also more efficient - the length only needs to be increased\n/// by one.\n///\n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\n/// is a reasonable maximum bound that can be placed on the vector.\n///\n/// Example:\n///\n/// ```noir\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\n/// for i in 0..5 {\n///     vector.push(i);\n/// }\n/// assert(vector.len() == 5);\n/// assert(vector.max_len() == 10);\n/// ```\npub struct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    /// Creates a new, empty vector of length zero.\n    ///\n    /// Since this container is backed by an array internally, it still needs an initial value\n    /// to give each element. To resolve this, each element is zeroed internally. This value\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\n    /// assert(empty_vector.len() == 0);\n    /// ```\n    ///\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\n    /// via a type signature:\n    ///\n    /// ```noir\n    /// fn good() -> BoundedVec<Field, 10> {\n    ///     // Ok! MaxLen is specified with a type annotation\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\n    ///     let v2 = BoundedVec::new();\n    ///\n    ///     // Ok! MaxLen is known from the type of `good`'s return value\n    ///     v2\n    /// }\n    ///\n    /// fn bad() {\n    ///     // Error: Type annotation needed\n    ///     // The compiler can't infer `MaxLen` from the following code:\n    ///     let mut v3 = BoundedVec::new();\n    ///     v3.push(5);\n    /// }\n    /// ```\n    ///\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a\n    /// constraint failure at runtime when the vec is pushed to.\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this\n    /// will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     let last = v.get(v.len() - 1);\n    ///     assert(first != last);\n    /// }\n    /// ```\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero, without\n    /// performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element,\n    /// it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\n    ///     // Always ensure the length is larger than the largest\n    ///     // index passed to get_unchecked\n    ///     assert(v.len() > 2);\n    ///     let first = v.get_unchecked(0);\n    ///     let second = v.get_unchecked(1);\n    ///     let third = v.get_unchecked(2);\n    ///     first + second + third\n    /// }\n    /// ```\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     assert(first != 42);\n    ///     v.set(0, 42);\n    ///     let new_first = v.get(0);\n    ///     assert(new_first == 42);\n    /// }\n    /// ```\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn set_unchecked_example() {\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n    ///     vec.extend_from_array([1, 2]);\n    ///\n    ///     // Here we're safely writing within the valid range of `vec`\n    ///     // `vec` now has the value [42, 2]\n    ///     vec.set_unchecked(0, 42);\n    ///\n    ///     // We can then safely read this value back out of `vec`.\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\n    ///     assert_eq(vec.get(0), 42);\n    ///\n    ///     // We've now written past the end of `vec`.\n    ///     // As this index is still within the maximum potential length of `v`,\n    ///     // it won't cause a constraint failure.\n    ///     vec.set_unchecked(2, 42);\n    ///     println(vec);\n    ///\n    ///     // This will write past the end of the maximum potential length of `vec`,\n    ///     // it will then trigger a constraint failure.\n    ///     vec.set_unchecked(5, 42);\n    ///     println(vec);\n    /// }\n    /// ```\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    /// Pushes an element to the end of the vector. This increases the length\n    /// of the vector by one.\n    ///\n    /// Panics if the new length of the vector will be greater than the max length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    ///\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// // Panics with failed assertion \"push out of bounds\"\n    /// v.push(3);\n    /// ```\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    /// Returns the current length of this vector\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\n    /// assert(v.len() == 0);\n    ///\n    /// v.push(100);\n    /// assert(v.len() == 1);\n    ///\n    /// v.push(200);\n    /// v.push(300);\n    /// v.push(400);\n    /// assert(v.len() == 4);\n    ///\n    /// let _ = v.pop();\n    /// let _ = v.pop();\n    /// assert(v.len() == 2);\n    /// ```\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    /// Returns the maximum length of this vector. This is always\n    /// equal to the `MaxLen` parameter this vector was initialized with.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.max_len() == 5);\n    /// v.push(10);\n    /// assert(v.max_len() == 5);\n    /// ```\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    /// Returns the internal array within this vector.\n    ///\n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\n    /// the storage held internally by this vector.\n    ///\n    /// Note that uninitialized elements may be zeroed out!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\n    ///\n    /// v.push(57);\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\n    /// ```\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    /// Pushes each element from the given array to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_array([2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the given slice to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_slice(&[2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the other vector to this vector. The length of\n    /// the other vector is left unchanged.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// ```noir\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\n    ///\n    /// v2.extend_from_array([1, 2, 3]);\n    /// v1.extend_from_bounded_vec(v2);\n    ///\n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\n    /// ```\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        let mut exceeded_len = false;\n        for i in 0..Len {\n            exceeded_len |= i == append_len;\n            if !exceeded_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        }\n        self.len = new_len;\n    }\n\n    /// Creates a new vector, populating it with values derived from an array input.\n    /// The maximum length of the vector is determined based on the type signature.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\n    /// ```\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    /// Pops the element at the end of the vector. This will decrease the length\n    /// of the vector by one.\n    ///\n    /// Panics if the vector is empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// let two = v.pop();\n    /// let one = v.pop();\n    ///\n    /// assert(two == 2);\n    /// assert(one == 1);\n    ///\n    /// // error: cannot pop from an empty vector\n    /// let _ = v.pop();\n    /// ```\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    /// Returns true if the given predicate returns true for any element\n    /// in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\n    /// v.extend_from_array([2, 4, 6]);\n    ///\n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\n    /// assert(all_even);\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if !exceeded_len {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.map(|value| value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n        for i in 0..MaxLen {\n            if i < self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        }\n        ret\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n        (self.len == other.len) & (self.storage == other.storage)\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.storage()[2], 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage()[0], 1);\n            assert_eq(bounded_vec.storage()[1], 2);\n            assert_eq(bounded_vec.storage()[2], 3);\n        }\n\n        #[test(should_fail_with = \"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.storage()[0], 1);\n            assert_eq(bounded_vec.storage()[1], 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n}\n","path":"std/collections/bounded_vec.nr"},"25":{"source":"use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\nglobal TWO_POW_64: Field = 0x10000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(mut x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 64 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low_lower_64 = (x as u64) as Field;\n    x = (x - low_lower_64) / TWO_POW_64;\n    let low_upper_64 = (x as u64) as Field;\n\n    let high = (x - low_upper_64) / TWO_POW_64;\n    let low = low_upper_64 * TWO_POW_64 + low_lower_64;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(unsafe { field_less_than(b, a) });\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        // Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n","path":"std/field/bn254.nr"},"26":{"source":"pub mod bn254;\nuse crate::runtime::is_unconstrained;\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        assert(BIT_SIZE < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_le_bits\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_be_bits\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n","path":"std/field/mod.nr"},"27":{"source":"use crate::runtime::is_unconstrained;\n\nglobal BLOCK_SIZE_IN_BYTES: u32 = 136; //(1600 - BITS * 2) / WORD_SIZE;\nglobal WORD_SIZE: u32 = 8; // Limbs are made up of u64s so 8 bytes each.\nglobal LIMBS_PER_BLOCK: u32 = BLOCK_SIZE_IN_BYTES / WORD_SIZE;\nglobal NUM_KECCAK_LANES: u32 = 25;\n\n#[foreign(keccakf1600)]\nfn keccakf1600(input: [u64; 25]) -> [u64; 25] {}\n\n#[no_predicates]\npub(crate) fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32] {\n    assert(N >= message_size);\n\n    // Copy input to block bytes. For that we'll need at least input bytes (N)\n    // but we want it to be padded to a multiple of BLOCK_SIZE_IN_BYTES.\n    let mut block_bytes = [0; ((N / BLOCK_SIZE_IN_BYTES) + 1) * BLOCK_SIZE_IN_BYTES];\n    if is_unconstrained() {\n        for i in 0..message_size {\n            block_bytes[i] = input[i];\n        }\n    } else {\n        for i in 0..N {\n            if i < message_size {\n                block_bytes[i] = input[i];\n            }\n        }\n    }\n\n    //1. format_input_lanes\n    let max_blocks = (N + BLOCK_SIZE_IN_BYTES) / BLOCK_SIZE_IN_BYTES;\n    //maximum number of bytes to hash\n    let real_max_blocks = (message_size + BLOCK_SIZE_IN_BYTES) / BLOCK_SIZE_IN_BYTES;\n    let real_blocks_bytes = real_max_blocks * BLOCK_SIZE_IN_BYTES;\n\n    block_bytes[message_size] = 1;\n    block_bytes[real_blocks_bytes - 1] = 0x80;\n\n    // populate a vector of 64-bit limbs from our byte array\n    let mut sliced_buffer =\n        [0; (((N / BLOCK_SIZE_IN_BYTES) + 1) * BLOCK_SIZE_IN_BYTES) / WORD_SIZE];\n    for i in 0..sliced_buffer.len() {\n        let limb_start = WORD_SIZE * i;\n\n        let mut sliced = 0;\n        let mut v = 1;\n        for k in 0..WORD_SIZE {\n            sliced += v * (block_bytes[limb_start + k] as Field);\n            v *= 256;\n        }\n\n        sliced_buffer[i] = sliced as u64;\n    }\n\n    //2. sponge_absorb\n    let mut state: [u64; NUM_KECCAK_LANES] = [0; NUM_KECCAK_LANES];\n    // When in an unconstrained runtime we can take advantage of runtime loop bounds,\n    // thus allowing us to simplify the loop body.\n    if is_unconstrained() {\n        for i in 0..real_max_blocks {\n            if (i == 0) {\n                for j in 0..LIMBS_PER_BLOCK {\n                    state[j] = sliced_buffer[j];\n                }\n            } else {\n                for j in 0..LIMBS_PER_BLOCK {\n                    state[j] = state[j] ^ sliced_buffer[i * LIMBS_PER_BLOCK + j];\n                }\n            }\n            state = keccakf1600(state);\n        }\n    } else {\n        // `real_max_blocks` is guaranteed to at least be `1`\n        // We peel out the first block as to avoid a conditional inside of the loop.\n        // Otherwise, a dynamic predicate can cause a blowup in a constrained runtime.\n        for j in 0..LIMBS_PER_BLOCK {\n            state[j] = sliced_buffer[j];\n        }\n        state = keccakf1600(state);\n        for i in 1..max_blocks {\n            if i < real_max_blocks {\n                for j in 0..LIMBS_PER_BLOCK {\n                    state[j] = state[j] ^ sliced_buffer[i * LIMBS_PER_BLOCK + j];\n                }\n                state = keccakf1600(state);\n            }\n        }\n    }\n\n    //3. sponge_squeeze\n    let mut result = [0; 32];\n    for i in 0..4 {\n        let lane = state[i] as Field;\n        let lane_le: [u8; 8] = lane.to_le_bytes();\n        for j in 0..8 {\n            result[8 * i + j] = lane_le[j];\n        }\n    }\n    result\n}\n\nmod tests {\n    use super::keccak256;\n\n    #[test]\n    fn smoke_test() {\n        let input = [0xbd];\n        let result = [\n            0x5a, 0x50, 0x2f, 0x9f, 0xca, 0x46, 0x7b, 0x26, 0x6d, 0x5b, 0x78, 0x33, 0x65, 0x19,\n            0x37, 0xe8, 0x05, 0x27, 0x0c, 0xa3, 0xf3, 0xaf, 0x1c, 0x0d, 0xd2, 0x46, 0x2d, 0xca,\n            0x4b, 0x3b, 0x1a, 0xbf,\n        ];\n        assert_eq(keccak256(input, input.len()), result);\n    }\n\n    #[test]\n    fn hash_hello_world() {\n        let input = \"Hello world!\".as_bytes();\n        let result = [\n            0xec, 0xd0, 0xe1, 0x8, 0xa9, 0x8e, 0x19, 0x2a, 0xf1, 0xd2, 0xc2, 0x50, 0x55, 0xf4, 0xe3,\n            0xbe, 0xd7, 0x84, 0xb5, 0xc8, 0x77, 0x20, 0x4e, 0x73, 0x21, 0x9a, 0x52, 0x3, 0x25, 0x1f,\n            0xea, 0xab,\n        ];\n        assert_eq(keccak256(input, input.len()), result);\n    }\n\n    #[test]\n    fn var_size_hash() {\n        let input = [\n            189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205,\n            206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222,\n            223,\n        ];\n        let result = [\n            226, 37, 115, 94, 94, 196, 72, 116, 194, 105, 79, 233, 65, 12, 30, 94, 181, 131, 170,\n            219, 171, 166, 236, 88, 143, 67, 255, 160, 248, 214, 39, 129,\n        ];\n        assert_eq(keccak256(input, 13), result);\n    }\n\n    #[test]\n    fn hash_longer_than_136_bytes() {\n        let input = \"123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789\"\n            .as_bytes();\n        assert(input.len() > 136);\n\n        let result = [\n            0x1d, 0xca, 0xeb, 0xdf, 0xd9, 0xd6, 0x24, 0x67, 0x1c, 0x18, 0x16, 0xda, 0xd, 0x8a, 0xeb,\n            0xa8, 0x75, 0x71, 0x2c, 0xc, 0x89, 0xe0, 0x25, 0x2, 0xe8, 0xb6, 0x5e, 0x16, 0x5, 0x55,\n            0xe4, 0x40,\n        ];\n        assert_eq(keccak256(input, input.len()), result);\n    }\n}\n","path":"std/hash/keccak.nr"},"28":{"source":"pub mod poseidon;\npub mod poseidon2;\npub mod keccak;\npub mod sha256;\npub mod sha512;\n\nuse crate::default::Default;\nuse crate::embedded_curve_ops::{\n    EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_array_return,\n};\nuse crate::meta::derive_via;\nuse crate::uint128::U128;\n\n// Kept for backwards compatibility\npub use sha256::{digest, sha256, sha256_compression, sha256_var};\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[inline_always]\npub fn pedersen_commitment_with_separator<let N: u32>(\n    input: [Field; N],\n    separator: u32,\n) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[no_predicates]\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: [EmbeddedCurveScalar; N + 1] = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N + 1];\n    let mut generators: [EmbeddedCurvePoint; N + 1] =\n        [EmbeddedCurvePoint::point_at_infinity(); N + 1];\n    let domain_generators: [EmbeddedCurvePoint; N] =\n        derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n\n    for i in 0..N {\n        scalars[i] = from_field_unsafe(input[i]);\n        generators[i] = domain_generators[i];\n    }\n    scalars[N] = EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field };\n\n    let length_generator: [EmbeddedCurvePoint; 1] =\n        derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    generators[N] = length_generator[0];\n    multi_scalar_mul_array_return(generators, scalars)[0]\n}\n\n#[field(bn254)]\n#[inline_always]\npub fn derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n// Same as from_field but:\n// does not assert the limbs are 128 bits\n// does not assert the decomposition does not overflow the EmbeddedCurveScalar\nfn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    let (xlo, xhi) = unsafe { crate::field::bn254::decompose_hint(scalar) };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n// docs:start:keccak256\npub fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{\n    crate::hash::keccak::keccak256(input, message_size)\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: StructDefinition) -> Quoted {\n    let name = quote { Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: std::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(\n        s,\n        name,\n        signature,\n        for_each_field,\n        quote {},\n        |fields| fields,\n    )\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher<H>\nwhere\n    H: Hasher,\n{\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H)\n    where\n        H: Hasher,\n    {}\n}\n\nimpl Hash for U128 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self.lo as Field);\n        H::write(state, self.hi as Field);\n    }\n}\n\nimpl<T, let N: u32> Hash for [T; N]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B)\nwhere\n    A: Hash,\n    B: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n    E: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1),\n        0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1),\n        EmbeddedCurvePoint {\n            x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n            y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n            is_infinite: false,\n        },\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2),\n        0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2),\n        EmbeddedCurvePoint {\n            x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n            y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3),\n        0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3),\n        EmbeddedCurvePoint {\n            x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n            y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4),\n        0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4),\n        EmbeddedCurvePoint {\n            x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n            y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5),\n        0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5),\n        EmbeddedCurvePoint {\n            x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n            y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6),\n        0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6),\n        EmbeddedCurvePoint {\n            x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n            y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        EmbeddedCurvePoint {\n            x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n            y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        EmbeddedCurvePoint {\n            x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n            y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        EmbeddedCurvePoint {\n            x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n            y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        EmbeddedCurvePoint {\n            x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n            y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n            is_infinite: false,\n        },\n    );\n}\n","path":"std/hash/mod.nr"},"36":{"source":"pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod merkle;\npub mod schnorr;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod eddsa;\npub mod embedded_curve_ops;\npub mod sha256;\npub mod sha512;\npub mod field;\npub mod ec;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod uint128;\npub mod bigint;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<let N: u32>(predicate: bool, message: str<N>) {}\n\n// from_field and as_field are private since they are not valid for every type.\n// `as` should be the default for users to cast between primitive types, and in the future\n// traits can be used to work with generic types.\n#[builtin(from_field)]\nfn from_field<T>(x: Field) -> T {}\n\n#[builtin(as_field)]\nfn as_field<T>(x: T) -> Field {}\n\npub fn wrapping_add<T>(x: T, y: T) -> T {\n    crate::from_field(crate::as_field(x) + crate::as_field(y))\n}\n\npub fn wrapping_sub<T>(x: T, y: T) -> T {\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    crate::from_field(\n        crate::as_field(x) + 340282366920938463463374607431768211456 - crate::as_field(y),\n    )\n}\n\npub fn wrapping_mul<T>(x: T, y: T) -> T {\n    crate::from_field(crate::as_field(x) * crate::as_field(y))\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\n","path":"std/lib.nr"},"69":{"source":"use dep::lib::{ecrecover, proof};\n\nfn main(\n    // Address Data\n    signature: [u8; 64],\n    message_hash: [u8; 32],\n    pub_key_x: [u8; 32],\n    pub_key_y: [u8; 32],\n    // Storage Proof\n    storage_hash: [u8; 32],\n    storage_nodes: [[u8; 532]; 7],\n    storage_leaf: [u8; 69],\n    storage_depth: u32,\n    storage_value: Field,\n    // Verification Data\n    chain_id: Field,\n    block_number: Field,\n    token_address: Field,\n    balance_slot: Field,\n    // Balance Data\n    verified_balance: Field,\n) -> pub (Field, Field, Field, Field, Field, [u8; 32]) {\n    let balance_slot_bytes: [u8; 32] = balance_slot.to_be_bytes();\n    let address: [u8; 32] =\n        ecrecover::ecrecover(pub_key_x, pub_key_y, signature, message_hash).to_be_bytes();\n\n    let key = proof::get_storage_key([address, balance_slot_bytes]);\n    let value = proof::get_storage_value(storage_value);\n\n    proof::verify(\n        key,\n        value,\n        storage_hash,\n        storage_nodes,\n        storage_leaf,\n        storage_depth,\n    );\n\n    assert(!storage_value.lt(verified_balance), \"Attempt to verify too high balance\");\n\n    (verified_balance, chain_id, block_number, token_address, balance_slot, storage_hash)\n}\n\n#[test]\nfn test_main() {\n    let signature = [\n        0x2d, 0x37, 0xb1, 0x66, 0x31, 0xb6, 0x7c, 0xbe, 0x79, 0xe8, 0xb1, 0x15, 0xcd, 0xa1, 0xee,\n        0x74, 0xdd, 0xe8, 0x49, 0x2b, 0xee, 0xf9, 0xfa, 0xc0, 0x74, 0x67, 0x77, 0xc4, 0x63, 0xe0,\n        0xc8, 0xcc, 0x5c, 0xfd, 0x2c, 0xea, 0x5f, 0x1e, 0x2e, 0x6d, 0x88, 0x99, 0xe4, 0xfe, 0x33,\n        0xab, 0x70, 0x9a, 0x44, 0x9e, 0x26, 0x2c, 0xc9, 0xfc, 0x56, 0xc3, 0xd6, 0x3b, 0x78, 0x9d,\n        0x99, 0x27, 0x09, 0x54,\n    ];\n    let message_hash = [\n        0x9d, 0x44, 0x7d, 0x95, 0x6f, 0x18, 0xf0, 0x6e, 0xfc, 0x4e, 0x1f, 0xa2, 0xb7, 0x15, 0xe6,\n        0xa4, 0x6f, 0xe6, 0x80, 0xd3, 0xd3, 0x5e, 0x1e, 0xbe, 0x90, 0xb9, 0xd5, 0x6a, 0xd1, 0xed,\n        0xdc, 0xa1,\n    ];\n    let pub_key_x = [\n        0x12, 0x09, 0x76, 0x95, 0x85, 0xe7, 0xea, 0x6b, 0x1d, 0x48, 0xfb, 0x8e, 0x7a, 0x49, 0xad,\n        0x4a, 0x68, 0x7f, 0x3f, 0x21, 0x9c, 0x80, 0x2b, 0x16, 0x71, 0x32, 0xb3, 0x45, 0x6a, 0xd8,\n        0xd2, 0xe4,\n    ];\n    let pub_key_y = [\n        0x73, 0x32, 0x84, 0xca, 0x26, 0x7f, 0x3c, 0x5e, 0x6f, 0xa7, 0x5b, 0xad, 0xe8, 0x23, 0xfd,\n        0xab, 0xd5, 0xb4, 0xb6, 0xa9, 0x13, 0x85, 0xd1, 0xa6, 0xde, 0xd7, 0x6c, 0xb5, 0x5d, 0x73,\n        0x61, 0x1c,\n    ];\n    let balance_slot = 0;\n    let verified_balance = 0x27b7c8936148ec1a00001;\n    let storage_value = 0x27b7c8936148ec1a00001;\n    let storage_hash = [\n        0xfe, 0x24, 0x8f, 0x06, 0xea, 0xe1, 0xa1, 0x53, 0xfb, 0x78, 0x4d, 0x20, 0x48, 0x40, 0x71,\n        0x89, 0x2f, 0xc0, 0xcd, 0xcd, 0x8c, 0x7b, 0x76, 0x4c, 0xc6, 0xb4, 0xcf, 0x33, 0xfd, 0x33,\n        0xa5, 0x24,\n    ];\n    let storage_nodes = [\n        [\n            0xf9, 0x02, 0x11, 0xa0, 0x65, 0x4f, 0x43, 0xea, 0xba, 0x96, 0xcf, 0x57, 0x0d, 0xa0,\n            0x12, 0xb1, 0xc6, 0x47, 0xf4, 0xf4, 0x6d, 0x21, 0x0e, 0x9d, 0x96, 0xec, 0x81, 0x87,\n            0x26, 0x8d, 0xd3, 0x04, 0xa0, 0x78, 0xad, 0xb1, 0xa0, 0x27, 0x9e, 0x0a, 0xcb, 0xa7,\n            0xdf, 0x47, 0xd6, 0x00, 0x24, 0xc1, 0x21, 0x0b, 0x0e, 0xe0, 0x6b, 0x70, 0x11, 0x1f,\n            0xf1, 0xae, 0x08, 0x3a, 0x75, 0xe9, 0x2d, 0x07, 0x4c, 0x30, 0x3b, 0x8b, 0x3c, 0xa0,\n            0xf5, 0x9e, 0x78, 0x37, 0x07, 0xfd, 0x10, 0x5f, 0x6c, 0x4f, 0x10, 0x78, 0xfc, 0x2c,\n            0xeb, 0x68, 0xdd, 0xb2, 0x5a, 0x20, 0x10, 0x7f, 0xd5, 0xe6, 0x67, 0x6a, 0x6f, 0xe1,\n            0x6a, 0xed, 0x69, 0x66, 0xa0, 0x73, 0xba, 0x92, 0xc1, 0x7f, 0x06, 0x1b, 0xeb, 0xe2,\n            0xe9, 0x73, 0xc4, 0xdc, 0x40, 0x92, 0xdf, 0xf4, 0xb3, 0x19, 0x35, 0x3d, 0x37, 0xdb,\n            0x6d, 0x84, 0xde, 0x4e, 0x9a, 0xc9, 0x6a, 0xd7, 0x7c, 0xa0, 0x8c, 0xb6, 0xac, 0xfb,\n            0x9e, 0x40, 0x7c, 0x5a, 0x81, 0x47, 0xaa, 0xe8, 0xb6, 0xb3, 0x9e, 0x60, 0xf9, 0xf9,\n            0x36, 0x05, 0x24, 0x5e, 0xe1, 0xd4, 0xfb, 0xec, 0xa3, 0x2d, 0x7c, 0x30, 0x10, 0x43,\n            0xa0, 0xa5, 0x79, 0xf5, 0x94, 0x63, 0xa2, 0xbd, 0x14, 0xf2, 0x90, 0x97, 0x98, 0x68,\n            0xa0, 0x85, 0x48, 0xf1, 0x7b, 0x8a, 0x3b, 0x52, 0x1f, 0x98, 0x0a, 0xfd, 0x63, 0x77,\n            0x5b, 0x4c, 0xea, 0x5d, 0xed, 0xa0, 0x65, 0x4e, 0xa5, 0xea, 0xe7, 0x47, 0x8b, 0x91,\n            0x31, 0x2c, 0x6f, 0x50, 0x1a, 0xa9, 0x73, 0xcd, 0x43, 0xe9, 0xc1, 0xfe, 0x14, 0x2c,\n            0x3f, 0xba, 0x9a, 0xfd, 0x6c, 0x73, 0xac, 0xf8, 0x47, 0x48, 0xa0, 0x6b, 0x34, 0x79,\n            0xc5, 0x03, 0x42, 0x1a, 0xa5, 0x17, 0x1a, 0x2b, 0x08, 0xf6, 0xdc, 0x09, 0x47, 0x99,\n            0xd8, 0x69, 0x6f, 0x37, 0xc0, 0x03, 0xe3, 0x96, 0x65, 0x68, 0x5f, 0xa8, 0x03, 0x5c,\n            0x39, 0xa0, 0xb2, 0x0e, 0x17, 0x69, 0x66, 0x1c, 0xe3, 0x01, 0xbb, 0x52, 0x4c, 0x94,\n            0xd8, 0x07, 0xeb, 0xf3, 0x5e, 0x64, 0xc8, 0x5f, 0xd2, 0x7a, 0xd5, 0x48, 0xb7, 0x37,\n            0x46, 0x89, 0xa5, 0x93, 0x70, 0x37, 0xa0, 0xc9, 0x6b, 0xe2, 0xab, 0xb9, 0x6b, 0xeb,\n            0x11, 0xec, 0xdd, 0xfa, 0xbc, 0x23, 0x79, 0x88, 0x62, 0xbf, 0x92, 0x24, 0xd7, 0xaf,\n            0xd8, 0x92, 0x0a, 0x95, 0x84, 0x14, 0x3f, 0x65, 0x36, 0xa3, 0x01, 0xa0, 0xe1, 0xde,\n            0xfa, 0x28, 0xf4, 0x66, 0x72, 0xea, 0xf6, 0x39, 0x10, 0x6b, 0x3c, 0x4a, 0x72, 0x77,\n            0x71, 0x8d, 0x78, 0xe4, 0xe5, 0x29, 0xc8, 0x83, 0x5d, 0x41, 0x0c, 0x58, 0x8f, 0xda,\n            0x9d, 0xcf, 0xa0, 0xf1, 0x86, 0xde, 0x2f, 0xb4, 0x22, 0xa1, 0x4b, 0x50, 0x7e, 0x7a,\n            0x83, 0xdd, 0x81, 0x58, 0x65, 0xba, 0xa8, 0xe8, 0xe4, 0xb9, 0x33, 0xfd, 0xfd, 0x81,\n            0x82, 0xf8, 0x28, 0x9c, 0x88, 0xce, 0xf3, 0xa0, 0x77, 0x0e, 0x0a, 0x32, 0xe6, 0xf9,\n            0xdc, 0x7f, 0x3d, 0x37, 0xc7, 0xa0, 0x18, 0x47, 0x4b, 0x84, 0xbd, 0xdd, 0x68, 0x7d,\n            0x44, 0x50, 0x31, 0x17, 0x95, 0x0a, 0xb9, 0x03, 0x03, 0xbf, 0xbe, 0x1d, 0xa0, 0xa6,\n            0x7d, 0x8d, 0x6a, 0x30, 0xfa, 0x19, 0xf7, 0x2b, 0xb1, 0x2e, 0x90, 0xb5, 0x69, 0x6c,\n            0x8a, 0xbe, 0xbd, 0x71, 0x64, 0x61, 0x37, 0x91, 0x5f, 0xaa, 0x01, 0x4b, 0xbf, 0x69,\n            0xf1, 0x6c, 0x82, 0xa0, 0xfc, 0x02, 0xbb, 0x26, 0xc9, 0x2d, 0x42, 0x93, 0xc9, 0x7c,\n            0xae, 0xb2, 0x38, 0xeb, 0x71, 0xc2, 0x18, 0x4e, 0xc2, 0x42, 0xa1, 0xae, 0xcb, 0x48,\n            0x96, 0xf8, 0xfb, 0x20, 0xe6, 0xc3, 0xe8, 0x17, 0xa0, 0x06, 0xf9, 0xc9, 0xc5, 0x58,\n            0xa1, 0xe2, 0x92, 0x5a, 0x2b, 0xa8, 0xed, 0x39, 0xe5, 0xe3, 0x13, 0x71, 0xe8, 0xa3,\n            0x4d, 0x1a, 0xb7, 0xb8, 0xe5, 0x3d, 0x2a, 0xef, 0x36, 0x6d, 0xd9, 0xb4, 0x68, 0x80,\n        ],\n        [\n            0xf9, 0x02, 0x11, 0xa0, 0x59, 0xf9, 0x19, 0x11, 0x94, 0x95, 0x9c, 0xd5, 0x6f, 0x85,\n            0x60, 0x1e, 0x5f, 0xa8, 0x4f, 0x43, 0x0d, 0x19, 0xe6, 0x97, 0xac, 0xa2, 0x05, 0xba,\n            0x85, 0x80, 0x9e, 0x95, 0xc6, 0x25, 0x79, 0x07, 0xa0, 0x0b, 0xde, 0xea, 0x0a, 0x72,\n            0x1c, 0xf8, 0x86, 0x19, 0xf6, 0x67, 0x40, 0x81, 0x89, 0x04, 0x32, 0xe6, 0xd0, 0x67,\n            0x42, 0x3d, 0x04, 0x9a, 0xbc, 0xdb, 0x6d, 0xd1, 0x91, 0x4f, 0x97, 0xd2, 0xce, 0xa0,\n            0x8c, 0x05, 0x6a, 0x88, 0x13, 0xcd, 0x3f, 0xb0, 0x71, 0x23, 0x47, 0x86, 0x6d, 0x7e,\n            0x3e, 0xcf, 0x8d, 0x89, 0x6c, 0x8b, 0xe9, 0xe4, 0x45, 0x11, 0x91, 0xbd, 0x93, 0x51,\n            0xb2, 0xe7, 0xcd, 0xad, 0xa0, 0xa0, 0xe3, 0xa7, 0x45, 0x78, 0x37, 0x52, 0xd5, 0x5b,\n            0x47, 0xbe, 0xd2, 0x01, 0x71, 0x2d, 0xab, 0xb8, 0x71, 0xc2, 0xac, 0xb6, 0x70, 0xf9,\n            0x2f, 0xd7, 0xb6, 0xd0, 0x32, 0x6a, 0x18, 0xea, 0xf0, 0xa0, 0xd4, 0x43, 0x4c, 0x0e,\n            0x2a, 0x5a, 0x39, 0x0b, 0x83, 0x8f, 0xcc, 0xc6, 0xf4, 0x06, 0xb5, 0x22, 0x83, 0x1e,\n            0x76, 0x7a, 0x71, 0xe7, 0x49, 0x44, 0x0b, 0x94, 0x59, 0x6b, 0xcc, 0xde, 0xde, 0xba,\n            0xa0, 0xa6, 0xf0, 0x7c, 0xc7, 0x97, 0x75, 0x7d, 0x20, 0xde, 0x26, 0x7d, 0x3f, 0x5f,\n            0x94, 0x66, 0x8a, 0x57, 0x01, 0x0d, 0xca, 0x08, 0x40, 0x4a, 0xfd, 0xe5, 0x87, 0xc5,\n            0xd8, 0x7d, 0x43, 0x7c, 0x2e, 0xa0, 0x26, 0x79, 0x87, 0xbd, 0x89, 0x8a, 0x37, 0x9b,\n            0x0c, 0xdb, 0x7c, 0x71, 0x29, 0x85, 0xcb, 0x04, 0x9b, 0x42, 0xc0, 0x1b, 0x9c, 0x2e,\n            0x8e, 0x6d, 0x95, 0xe8, 0xde, 0xa3, 0x1d, 0x0b, 0xdb, 0xe7, 0xa0, 0xa0, 0x86, 0x60,\n            0x89, 0xdd, 0x0c, 0xb0, 0xdf, 0x1f, 0x13, 0xfc, 0xa9, 0x3a, 0xf8, 0xca, 0xf4, 0x14,\n            0xf9, 0xa9, 0xbc, 0x87, 0xc5, 0x2c, 0x01, 0x89, 0x0b, 0x0d, 0x59, 0x06, 0x3a, 0x30,\n            0x22, 0xa0, 0x34, 0x3a, 0x91, 0xc4, 0x0e, 0xcb, 0x80, 0xa1, 0x94, 0xec, 0xea, 0xc5,\n            0x13, 0x3f, 0x1c, 0xfd, 0x2c, 0x81, 0x9c, 0xf7, 0xbe, 0x12, 0x46, 0x7d, 0x25, 0x25,\n            0x24, 0x61, 0xbc, 0x40, 0x5f, 0x75, 0xa0, 0xc5, 0x31, 0x34, 0x9f, 0xad, 0xdc, 0xfd,\n            0x82, 0x23, 0x66, 0xdd, 0x3b, 0x44, 0x78, 0xc3, 0xe2, 0x32, 0xc9, 0x07, 0x27, 0x65,\n            0x8e, 0x86, 0x5d, 0x07, 0xda, 0xb2, 0x6d, 0x5c, 0x94, 0xea, 0x60, 0xa0, 0x2b, 0xb8,\n            0x7e, 0x12, 0xf9, 0xae, 0xbd, 0x86, 0x0b, 0x78, 0x4d, 0x22, 0x48, 0x84, 0x69, 0x35,\n            0x9b, 0xbd, 0x9e, 0xc3, 0xe6, 0xcc, 0x03, 0x15, 0x45, 0x97, 0xdc, 0x5f, 0xc1, 0x68,\n            0xd7, 0xee, 0xa0, 0xd7, 0xe6, 0x2f, 0x5c, 0xab, 0x31, 0x69, 0x49, 0x70, 0x6b, 0xad,\n            0xa4, 0xee, 0x3a, 0x6d, 0xdb, 0x94, 0x4c, 0x8b, 0x82, 0xd3, 0x62, 0xb0, 0x8a, 0xef,\n            0xa8, 0x5d, 0x35, 0xad, 0x92, 0x22, 0x6c, 0xa0, 0xe9, 0xfe, 0x8c, 0x7c, 0x09, 0x4f,\n            0xdd, 0xab, 0x67, 0x1e, 0x1d, 0xae, 0x52, 0x4b, 0xee, 0xf0, 0xcc, 0x92, 0x15, 0x69,\n            0xf1, 0xbf, 0xb4, 0xd6, 0x6c, 0x35, 0x77, 0x30, 0x2e, 0x05, 0xea, 0xa1, 0xa0, 0x80,\n            0x0e, 0x28, 0x68, 0xa2, 0x9b, 0x41, 0x95, 0x2e, 0xe8, 0x81, 0x85, 0x42, 0x5f, 0xdf,\n            0xfc, 0xa3, 0x18, 0xf2, 0x3e, 0x45, 0x14, 0x66, 0x73, 0x9b, 0x95, 0xd0, 0x55, 0x1d,\n            0xcb, 0x03, 0x35, 0xa0, 0xd2, 0xf1, 0xbe, 0xf7, 0x62, 0x41, 0x6b, 0xa3, 0xe1, 0x5b,\n            0xf7, 0xd9, 0xb7, 0xc0, 0xc7, 0x71, 0x7c, 0xf2, 0x28, 0xb1, 0x7c, 0x4d, 0x92, 0xc7,\n            0xb7, 0x80, 0xb2, 0x14, 0xa8, 0x8f, 0x96, 0xdb, 0xa0, 0x83, 0x41, 0x35, 0x80, 0xf1,\n            0x04, 0x69, 0xa9, 0x6c, 0xf6, 0x1d, 0x3b, 0xa2, 0xc2, 0x88, 0xbb, 0xe4, 0xcb, 0xdc,\n            0x44, 0x03, 0xdc, 0x88, 0x99, 0x1c, 0xda, 0x60, 0xa7, 0x84, 0x02, 0xda, 0x05, 0x80,\n        ],\n        [\n            0xf9, 0x02, 0x11, 0xa0, 0x4a, 0x41, 0x8f, 0xd3, 0x5c, 0xfd, 0xf6, 0x80, 0x65, 0x01,\n            0x2d, 0x8a, 0xf2, 0x4f, 0x23, 0xc8, 0x88, 0x36, 0x80, 0xcf, 0x96, 0xd9, 0x74, 0xe5,\n            0xda, 0x19, 0xa0, 0xf1, 0x66, 0xae, 0x10, 0xb1, 0xa0, 0xda, 0xa8, 0xd2, 0xa5, 0x35,\n            0xaa, 0x65, 0x68, 0xbb, 0x05, 0xe8, 0x47, 0x30, 0xa4, 0x08, 0xef, 0x2b, 0x77, 0x5c,\n            0xaa, 0xf0, 0x48, 0xff, 0x71, 0x73, 0x8f, 0x3a, 0x09, 0xa8, 0x4a, 0x45, 0x2d, 0xa0,\n            0x92, 0xee, 0x80, 0x2f, 0x9d, 0xe7, 0x2b, 0x2c, 0x71, 0x41, 0x6b, 0x75, 0x6f, 0x4b,\n            0xa6, 0x56, 0x5f, 0x56, 0x16, 0xe0, 0x06, 0x2b, 0x7d, 0xe5, 0x3d, 0x82, 0xbd, 0x06,\n            0xd8, 0x14, 0xa4, 0xdb, 0xa0, 0xae, 0xd4, 0xe9, 0x7b, 0x76, 0xe1, 0xda, 0x53, 0x21,\n            0xdb, 0x87, 0x85, 0x11, 0x96, 0x86, 0xf0, 0x15, 0x36, 0x70, 0x29, 0x3e, 0x7b, 0xfc,\n            0xcd, 0xfe, 0x11, 0xf5, 0x28, 0x6c, 0x19, 0x3a, 0xff, 0xa0, 0xb1, 0x71, 0x38, 0x3e,\n            0x58, 0x91, 0xef, 0x23, 0xdd, 0xf8, 0x59, 0xc9, 0x1a, 0x5e, 0xbb, 0xd0, 0x10, 0x7b,\n            0x1b, 0xcd, 0xea, 0x71, 0xf0, 0x57, 0x76, 0x4c, 0x88, 0x09, 0x57, 0xca, 0xe1, 0xcb,\n            0xa0, 0xa4, 0xf4, 0x48, 0xba, 0xc0, 0x6a, 0x3f, 0xbd, 0x78, 0xd0, 0xd4, 0xda, 0xd0,\n            0x8b, 0x8f, 0xff, 0xb8, 0x29, 0x9f, 0x00, 0x30, 0x30, 0xf8, 0x48, 0x89, 0x9f, 0x3b,\n            0xe0, 0x84, 0x72, 0x3a, 0x0c, 0xa0, 0x2d, 0xb3, 0x0a, 0x85, 0xa5, 0x6e, 0x1b, 0xef,\n            0xa9, 0xaa, 0x23, 0x31, 0x96, 0x99, 0xd5, 0x6d, 0x27, 0x0c, 0xcb, 0xda, 0x9e, 0x8f,\n            0x46, 0xd0, 0x9d, 0x66, 0x99, 0xa8, 0x1b, 0x8b, 0x29, 0xf7, 0xa0, 0x0d, 0xeb, 0x1d,\n            0xf8, 0x72, 0x35, 0x9d, 0x2d, 0x8d, 0xc6, 0x8f, 0xec, 0x4e, 0x89, 0x18, 0x93, 0xa1,\n            0xbf, 0xe0, 0x4a, 0x91, 0x30, 0x58, 0x3b, 0xcf, 0xb6, 0xa7, 0x7f, 0xe0, 0xc2, 0x1e,\n            0x80, 0xa0, 0x8f, 0x75, 0x72, 0x16, 0xf1, 0x40, 0x06, 0xd6, 0x4d, 0xce, 0x23, 0x76,\n            0x25, 0x1e, 0x2d, 0xdf, 0xc3, 0x13, 0xeb, 0xa6, 0x38, 0xce, 0xd1, 0xde, 0x5f, 0x14,\n            0xe4, 0x93, 0x56, 0x76, 0x84, 0x23, 0xa0, 0xa2, 0x45, 0x15, 0x96, 0x88, 0x51, 0x27,\n            0x44, 0x8f, 0x3d, 0x61, 0x0c, 0x8a, 0x63, 0x22, 0x85, 0x05, 0x70, 0xf2, 0x21, 0x39,\n            0x57, 0x60, 0x57, 0x72, 0x2d, 0xe9, 0x6a, 0x9a, 0xeb, 0x25, 0xa4, 0xa0, 0x63, 0xd2,\n            0xdd, 0x75, 0x2e, 0xa9, 0x4c, 0x03, 0x33, 0x1a, 0x4d, 0x45, 0x97, 0x92, 0xc2, 0x66,\n            0x6d, 0x15, 0x6c, 0x4b, 0x5f, 0x58, 0x38, 0x01, 0xc1, 0x2f, 0x42, 0xc2, 0x40, 0xee,\n            0x79, 0xd0, 0xa0, 0xd6, 0x2f, 0x4d, 0xf8, 0x19, 0x8b, 0x1c, 0x79, 0x6c, 0xaf, 0x1f,\n            0xe5, 0x2c, 0xeb, 0xab, 0x63, 0x67, 0x9d, 0x06, 0x16, 0x8d, 0xa6, 0x26, 0xdb, 0x04,\n            0x7f, 0x76, 0xa1, 0x39, 0xae, 0x8e, 0x21, 0xa0, 0xf7, 0x6b, 0x3b, 0x27, 0xb0, 0xfc,\n            0x61, 0x2e, 0xb0, 0x54, 0x61, 0xa7, 0x14, 0xe9, 0x22, 0xa6, 0x90, 0xcd, 0x56, 0xe0,\n            0x33, 0x6a, 0x0a, 0x83, 0x9b, 0x20, 0x46, 0xb0, 0xad, 0x24, 0xaa, 0xe2, 0xa0, 0x08,\n            0x8e, 0x66, 0xe3, 0xc7, 0xec, 0x61, 0xc2, 0xd4, 0x5d, 0xd3, 0xce, 0xb3, 0x9c, 0x49,\n            0xc6, 0x50, 0x04, 0x74, 0x7a, 0x65, 0x14, 0x2b, 0xb4, 0x8d, 0x3a, 0x93, 0x03, 0x9f,\n            0x6c, 0x70, 0x73, 0xa0, 0xd5, 0x27, 0x3e, 0x84, 0x4f, 0x01, 0xce, 0x69, 0x11, 0x0d,\n            0xe3, 0x17, 0x91, 0x7d, 0x7d, 0xc1, 0x05, 0xf3, 0x45, 0x9e, 0x8b, 0x70, 0xc9, 0xf2,\n            0xad, 0xd4, 0xec, 0xa8, 0xd4, 0x1c, 0xb1, 0xbc, 0xa0, 0xf0, 0x04, 0x6d, 0x08, 0xb8,\n            0x17, 0x8a, 0x5d, 0x74, 0x13, 0xaf, 0x84, 0xc2, 0xc6, 0x3d, 0x9a, 0xa2, 0xdc, 0x11,\n            0xe5, 0x52, 0x3d, 0x9d, 0x0f, 0x0f, 0x8a, 0x56, 0x6b, 0x49, 0x43, 0x10, 0x09, 0x80,\n        ],\n        [\n            0xf9, 0x01, 0xd1, 0x80, 0xa0, 0x4d, 0xa8, 0xf4, 0xc0, 0x7c, 0x24, 0x30, 0x58, 0x83,\n            0x79, 0xc4, 0x8b, 0x2f, 0x15, 0x75, 0x2d, 0x7f, 0x9b, 0x5c, 0x7a, 0x6d, 0x3e, 0xe6,\n            0x8e, 0x47, 0xa1, 0x1e, 0x5e, 0x22, 0x02, 0x7d, 0x7a, 0xa0, 0x55, 0xf6, 0x1f, 0x55,\n            0x0c, 0xf0, 0xf1, 0xc4, 0xa1, 0xb6, 0xa5, 0xee, 0x4a, 0x4f, 0xd0, 0x25, 0x01, 0x1e,\n            0x57, 0x86, 0x46, 0xbb, 0x33, 0xb9, 0x4d, 0x08, 0x73, 0xcf, 0x45, 0xd8, 0xf6, 0x21,\n            0xa0, 0x13, 0x07, 0x4f, 0x8f, 0x9f, 0x38, 0x0f, 0x4f, 0x91, 0xad, 0xfa, 0xea, 0xf6,\n            0xbe, 0x9f, 0xb2, 0x03, 0x7e, 0x0a, 0x96, 0x4c, 0x91, 0x57, 0x88, 0x62, 0xc9, 0xcd,\n            0x51, 0xdb, 0x57, 0xc9, 0x0f, 0xa0, 0x50, 0xa9, 0x73, 0x64, 0x1b, 0x47, 0x11, 0xec,\n            0x3f, 0xd3, 0xad, 0x36, 0x78, 0x98, 0x9a, 0xc9, 0x81, 0xd6, 0x20, 0x69, 0x6d, 0xc3,\n            0x5d, 0xe3, 0x64, 0x7e, 0x40, 0x66, 0xa8, 0x7f, 0xea, 0x1c, 0xa0, 0x87, 0xa2, 0xb9,\n            0x4b, 0xa7, 0x5a, 0x0c, 0xa4, 0x9a, 0x88, 0xbb, 0xb3, 0xa2, 0xcb, 0xca, 0x70, 0xe2,\n            0xb9, 0x8c, 0xa2, 0x97, 0x30, 0x37, 0x0f, 0x57, 0x6d, 0x8a, 0x4b, 0x1e, 0x53, 0x11,\n            0x99, 0xa0, 0xf2, 0x29, 0x88, 0x55, 0x37, 0x5e, 0xb8, 0xee, 0x8e, 0x16, 0xe4, 0x1b,\n            0x37, 0x9b, 0x41, 0xb0, 0x4f, 0x65, 0xfa, 0xd7, 0x31, 0x2c, 0x58, 0xfa, 0xc3, 0x58,\n            0x3e, 0x5e, 0xcb, 0x61, 0x43, 0x36, 0xa0, 0x41, 0xa2, 0xa0, 0x75, 0xec, 0x7c, 0x55,\n            0xce, 0x0e, 0x90, 0xee, 0x76, 0xd0, 0x81, 0xd7, 0x8f, 0x09, 0xf5, 0x40, 0x94, 0x5d,\n            0xd3, 0x50, 0xc3, 0xe4, 0x4b, 0xc8, 0x09, 0xe8, 0xb6, 0x73, 0xf0, 0x80, 0xa0, 0xe3,\n            0x0b, 0xa6, 0x17, 0xc9, 0x84, 0x0f, 0x40, 0x7a, 0x35, 0x1a, 0x6f, 0xbb, 0xe6, 0x59,\n            0xb5, 0xd1, 0x87, 0x86, 0xe5, 0x4e, 0x00, 0x23, 0x2a, 0xeb, 0x98, 0xa7, 0x1d, 0x94,\n            0x3a, 0x2e, 0xc9, 0xa0, 0x31, 0x26, 0xff, 0x24, 0x92, 0x90, 0xdd, 0x63, 0x45, 0x53,\n            0xf8, 0xe2, 0xb8, 0x3d, 0x5a, 0x0a, 0x14, 0x90, 0x2f, 0xe5, 0x21, 0xb0, 0x27, 0x34,\n            0x62, 0x3a, 0xf0, 0xaf, 0x9d, 0x78, 0x83, 0x3d, 0xa0, 0x03, 0xda, 0x4a, 0xd5, 0xd0,\n            0x6a, 0x6b, 0x1b, 0x0d, 0x30, 0x0a, 0x26, 0x27, 0xb3, 0x97, 0x31, 0xbe, 0xb1, 0x20,\n            0xdd, 0x65, 0x79, 0xab, 0x5b, 0x0e, 0x05, 0xbe, 0xc2, 0xb6, 0x79, 0xe0, 0xac, 0xa0,\n            0xb9, 0x5c, 0xa4, 0x83, 0xae, 0xbc, 0x19, 0xd7, 0x27, 0xfb, 0x40, 0x97, 0xf2, 0x30,\n            0x63, 0x3e, 0x6b, 0x5c, 0xc3, 0x3d, 0xfd, 0x1c, 0xce, 0x94, 0x06, 0x92, 0x13, 0x8f,\n            0x90, 0x2a, 0x2e, 0xf0, 0xa0, 0xfd, 0xdb, 0x15, 0xb6, 0xdf, 0x2c, 0xf5, 0xeb, 0xd7,\n            0x5c, 0x8d, 0x95, 0x55, 0x79, 0x64, 0x4b, 0x5b, 0xdf, 0xf8, 0xcc, 0xd5, 0xe9, 0xbb,\n            0xa7, 0x7f, 0xf8, 0x98, 0x42, 0x08, 0xac, 0xda, 0xff, 0xa0, 0x00, 0x45, 0x70, 0x24,\n            0x66, 0xc4, 0xfb, 0xd2, 0x14, 0xad, 0xba, 0x3c, 0x21, 0xae, 0x4d, 0xde, 0x0d, 0x59,\n            0xf0, 0x33, 0xc7, 0x92, 0xe9, 0x4c, 0xf3, 0xc1, 0xe4, 0x9e, 0xf9, 0x51, 0xfb, 0x27,\n            0xa0, 0xbe, 0x91, 0xef, 0xc6, 0x38, 0x96, 0x28, 0xd9, 0x10, 0xb5, 0x8a, 0xf6, 0x74,\n            0x49, 0xd4, 0x27, 0xb4, 0x2b, 0x8c, 0x30, 0x2d, 0x05, 0xfe, 0x10, 0x98, 0x0b, 0x01,\n            0x37, 0xa0, 0xdb, 0xf3, 0xd0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        ],\n        [\n            0xf8, 0x51, 0x80, 0xa0, 0xbc, 0x43, 0x11, 0x7f, 0x1b, 0x42, 0x1e, 0x4a, 0xd0, 0x7c,\n            0x91, 0xae, 0x86, 0xf5, 0x1a, 0xca, 0x7d, 0x4d, 0x51, 0x46, 0xa7, 0x37, 0x6d, 0x1f,\n            0xff, 0x58, 0x6b, 0xce, 0x02, 0x21, 0xdc, 0x75, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,\n            0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0xa0, 0x58, 0xa9, 0x36, 0xbb, 0xb3, 0xa5, 0x48,\n            0x29, 0xbd, 0x37, 0x12, 0x44, 0xa9, 0x42, 0x81, 0x2e, 0x11, 0x30, 0xc2, 0x85, 0x2b,\n            0x25, 0xe9, 0x85, 0xae, 0xe2, 0xb9, 0xfc, 0x50, 0xa7, 0xd3, 0x47, 0x80, 0x80, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        ],\n        [\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        ],\n        [\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        ],\n    ];\n    let storage_leaf = [\n        0xec, 0x9e, 0x3f, 0x9a, 0x85, 0x4d, 0xe2, 0x83, 0x3f, 0xd2, 0x17, 0x93, 0x51, 0x14, 0x08,\n        0x77, 0xfd, 0x92, 0x0a, 0x15, 0x98, 0x00, 0xdc, 0x1c, 0x13, 0x9b, 0x4e, 0x8e, 0x4b, 0x59,\n        0x65, 0x7b, 0x8c, 0x8b, 0x02, 0x7b, 0x7c, 0x89, 0x36, 0x14, 0x8e, 0xc1, 0xa0, 0x00, 0x01,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    ];\n    let storage_depth = 6;\n\n    main(\n        signature,\n        message_hash,\n        pub_key_x,\n        pub_key_y,\n        storage_hash,\n        storage_nodes,\n        storage_leaf,\n        storage_depth,\n        storage_value,\n        8453,\n        0,\n        0x0000000000000000000000000000000000000000,\n        balance_slot,\n        verified_balance,\n    );\n}\n","path":"/Users/kartik/projects/anoncast/packages/zk/circuits/erc20-balance/src/main.nr"},"71":{"source":"use crate::bytes::{byte_to_nibbles, bytes_as_nibbles};\nuse crate::rlp::{\n    decode_rlp_header, decode_rlp_list_fragments, encode_rlp_string, RLP_HEADER_TYPE_LIST,\n    RlpFragment,\n};\nuse dep::std::hash::keccak256;\n\npub fn verify<let NODES_LEN: u32>(\n    key: [u8; 32],\n    value: [u8; 32],\n    storage_hash: [u8; 32],\n    nodes: [[u8; 532]; NODES_LEN],\n    leaf: [u8; 69],\n    depth: u32,\n) {\n    let key_hash = get_key_hash(key);\n    let nibbles = bytes_as_nibbles(key_hash);\n\n    let mut key_index = 0;\n    let mut curr_hash = storage_hash;\n    for i in 0..NODES_LEN {\n        if i < depth - 1 {\n            let node = nodes[i];\n\n            // Decode RLP header\n            let rlp_header = decode_rlp_header(node);\n            assert(rlp_header.data_type == RLP_HEADER_TYPE_LIST, \"Invalid data type\");\n\n            // Validate node hash\n            let node_hash: [u8; 32] = get_node_hash(rlp_header, node);\n            assert(node_hash == curr_hash, \"Invalid hash\");\n\n            // Create next hash\n            let rlp_list: BoundedVec<RlpFragment, 17> = decode_rlp_list_fragments(rlp_header, node);\n            if rlp_list.len() == 17 {\n                // Branch Node\n                let curr_nibble = nibbles[key_index] as u32;\n                let rlp_item = rlp_list.get(curr_nibble);\n                assert(rlp_item.length == 32, \"Invalid length\");\n                curr_hash = copy(node, rlp_item.offset);\n                key_index += 1;\n            } else if rlp_list.len() == 2 {\n                // TODO: Extension Node\n            }\n        }\n    }\n\n    // Verify leaf\n    let rlp_header = decode_rlp_header(leaf);\n    assert(rlp_header.data_type == RLP_HEADER_TYPE_LIST, \"Invalid data type\");\n\n    let resolved_hash = get_node_hash(rlp_header, leaf);\n    assert(resolved_hash == curr_hash, \"Invalid hash\");\n\n    let rlp_list: BoundedVec<RlpFragment, 2> = decode_rlp_list_fragments(rlp_header, leaf);\n    assert(rlp_list.len() == 2, \"Invalid length\");\n\n    let leaf_key_item = rlp_list.get(0);\n    let mut leaf_key_part: [u8; 30] = [0; 30];\n    for i in 0..30 {\n        leaf_key_part[i] = leaf[leaf_key_item.offset + i];\n    }\n    let (leaf_key_prefix, leaf_key) = bytes_as_nibbles(leaf_key_part).as_slice().pop_front();\n    assert((leaf_key_prefix == 2) | (leaf_key_prefix == 3), \"Leaf parity prefix must be 2 or 3\");\n\n    let mut leaf_key_ending: [u8; 59] = [0; 59];\n    for i in 0..59 {\n        if key_index + i < nibbles.len() {\n            leaf_key_ending[i] = nibbles[key_index + i];\n        }\n    }\n    assert(leaf_key.as_array() == leaf_key_ending, \"Key mismatch in the leaf\");\n\n    key_index += leaf_key.len();\n    assert(key_index == nibbles.len(), \"Expected to consume all key nibbles\");\n\n    let leaf_value = rlp_list.get(1);\n    for i in 0..32 {\n        assert(leaf[leaf_value.offset + i] == value[i], \"Value mismatch\");\n    }\n}\n\nunconstrained fn copy<let N: u32>(arr: [u8; N], offset: u32) -> [u8; 32] {\n    let mut result: [u8; 32] = [0; 32];\n    for i in 0..32 {\n        result[i] = arr[offset + i];\n    }\n    result\n}\n\nunconstrained fn get_key_hash(key: [u8; 32]) -> [u8; 32] {\n    let key_hash = keccak256(key, 32);\n    key_hash\n}\n\nunconstrained fn get_node_hash<let NODE_LEN: u32>(\n    rlp_header: RlpFragment,\n    node: [u8; NODE_LEN],\n) -> [u8; 32] {\n    let node_len = rlp_header.length + rlp_header.offset;\n    let resolved_hash: [u8; 32] = keccak256(node, node_len);\n    resolved_hash\n}\n\npub fn get_storage_key<let N: u32>(values: [[u8; 32]; N]) -> [u8; 32] {\n    let mut input: [u8; N * 32] = [0; N * 32];\n    for i in 0..N {\n        for j in 0..32 {\n            input[i * 32 + j] = values[i][j];\n        }\n    }\n    let key = keccak256(input, input.len());\n    key\n}\n\npub fn get_storage_value(field: Field) -> [u8; 32] {\n    let value_bytes: [u8; 32] = field.to_be_bytes();\n    let value_rlp = encode_rlp_string(value_bytes);\n    value_rlp\n}\n","path":"/Users/kartik/projects/anoncast/packages/zk/circuits/lib/src/proof/mod.nr"},"72":{"source":"mod secp256k1;\n\npub fn ecrecover(\n    pub_key_x: [u8; 32],\n    pub_key_y: [u8; 32],\n    signature: [u8; 64], // clip v value\n    hashed_message: [u8; 32],\n) -> Field {\n    let key = secp256k1::PubKey::from_xy(pub_key_x, pub_key_y);\n\n    assert(key.verify_sig(signature, hashed_message));\n    let addr = key.to_eth_address();\n\n    addr\n}\n\n#[test]\nfn test_ecrecover() {\n    let pub_key_x = [\n        131, 24, 83, 91, 84, 16, 93, 74, 122, 174, 96, 192, 143, 196, 95, 150, 135, 24, 27, 79, 223,\n        198, 37, 189, 26, 117, 63, 167, 57, 127, 237, 117,\n    ];\n    let pub_key_y = [\n        53, 71, 241, 28, 168, 105, 102, 70, 242, 243, 172, 176, 142, 49, 1, 106, 250, 194, 62, 99,\n        12, 93, 17, 245, 159, 97, 254, 245, 123, 13, 42, 165,\n    ];\n    let signature = [\n        57, 17, 112, 239, 241, 30, 64, 157, 170, 50, 85, 145, 156, 69, 226, 85, 147, 164, 10, 82,\n        71, 93, 42, 132, 200, 220, 161, 255, 95, 241, 211, 141, 81, 7, 150, 25, 25, 27, 162, 213,\n        80, 61, 12, 170, 50, 4, 154, 203, 252, 229, 119, 29, 202, 153, 50, 25, 126, 145, 245, 23,\n        136, 75, 29, 177,\n    ];\n    let hashed_message = [\n        13, 82, 120, 60, 76, 186, 215, 235, 175, 126, 185, 67, 252, 100, 143, 82, 130, 165, 32, 112,\n        68, 47, 193, 141, 141, 209, 109, 219, 47, 203, 175, 102,\n    ];\n\n    let addr = ecrecover(pub_key_x, pub_key_y, signature, hashed_message);\n    assert(addr == 0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266);\n}\n","path":"/Users/kartik/projects/anoncast/packages/zk/circuits/lib/src/ecrecover/mod.nr"},"73":{"source":"use dep::std;\n\nuse dep::array_helpers;\n\nstruct PubKey {\n    pub_x: [u8; 32],\n    pub_y: [u8; 32],\n}\n\nfn split_uncompressed_pub_key(pub_key: [u8; 65]) -> ([u8; 32], [u8; 32]) {\n    let mut pub_key_x: [u8; 32] = [0; 32];\n    let mut pub_key_y: [u8; 32] = [0; 32];\n\n    for i in 0..32 {\n        pub_key_x[i] = pub_key[i + 1];\n        pub_key_y[i] = pub_key[i + 32 + 1];\n    }\n\n    (pub_key_x, pub_key_y)\n}\n\nimpl PubKey {\n    fn from_xy(pub_x: [u8; 32], pub_y: [u8; 32]) -> PubKey {\n        PubKey { pub_x, pub_y }\n    }\n\n    fn from_unified(pub_key: [u8; 64]) -> PubKey {\n        let (key_x, key_y) = array_helpers::split_u8_64(pub_key);\n\n        PubKey { pub_x: key_x, pub_y: key_y }\n    }\n\n    fn from_uncompressed(pub_key: [u8; 65]) -> PubKey {\n        assert(pub_key[0] == 0x04);\n        let (key_x, key_y) = split_uncompressed_pub_key(pub_key);\n\n        PubKey { pub_x: key_x, pub_y: key_y }\n    }\n\n    fn verify_sig(self, signature: [u8; 64], hashed_message: [u8; 32]) -> bool {\n        std::ecdsa_secp256k1::verify_signature(self.pub_x, self.pub_y, signature, hashed_message)\n    }\n\n    fn to_eth_address(self) -> Field {\n        let pub_key = array_helpers::u8_32_to_u8_64(self.pub_x, self.pub_y);\n        let hashed_pub_key = std::hash::keccak256(pub_key, 64);\n\n        let mut addr: Field = 0;\n        for i in 0..20 {\n            // shift left by 8 and add the new value\n            addr = (addr * 256) + hashed_pub_key[i + 12] as Field;\n        }\n\n        addr\n    }\n\n    fn ecrecover(self, signature: [u8; 64], hashed_message: [u8; 32]) -> Field {\n        assert(self.verify_sig(signature, hashed_message));\n\n        self.to_eth_address()\n    }\n}\n\n#[test]\nfn test_ecrecover_via_key() {\n    let pub_key_x = [\n        131, 24, 83, 91, 84, 16, 93, 74, 122, 174, 96, 192, 143, 196, 95, 150, 135, 24, 27, 79, 223,\n        198, 37, 189, 26, 117, 63, 167, 57, 127, 237, 117,\n    ];\n    let pub_key_y = [\n        53, 71, 241, 28, 168, 105, 102, 70, 242, 243, 172, 176, 142, 49, 1, 106, 250, 194, 62, 99,\n        12, 93, 17, 245, 159, 97, 254, 245, 123, 13, 42, 165,\n    ];\n    let signature = [\n        57, 17, 112, 239, 241, 30, 64, 157, 170, 50, 85, 145, 156, 69, 226, 85, 147, 164, 10, 82,\n        71, 93, 42, 132, 200, 220, 161, 255, 95, 241, 211, 141, 81, 7, 150, 25, 25, 27, 162, 213,\n        80, 61, 12, 170, 50, 4, 154, 203, 252, 229, 119, 29, 202, 153, 50, 25, 126, 145, 245, 23,\n        136, 75, 29, 177,\n    ];\n    let hashed_message = [\n        13, 82, 120, 60, 76, 186, 215, 235, 175, 126, 185, 67, 252, 100, 143, 82, 130, 165, 32, 112,\n        68, 47, 193, 141, 141, 209, 109, 219, 47, 203, 175, 102,\n    ];\n\n    let key = PubKey::from_xy(pub_key_x, pub_key_y);\n    assert(key.ecrecover(signature, hashed_message) == 0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266);\n}\n","path":"/Users/kartik/projects/anoncast/packages/zk/circuits/lib/src/ecrecover/secp256k1.nr"},"74":{"source":"pub fn bytes_as_nibbles<let N: u32>(bytes: [u8; N]) -> [u8; N * 2] {\n    let mut nibbles = [0; N * 2];\n    for i in 0..N {\n        let nibs = byte_to_nibbles(bytes[i]);\n        nibbles[i * 2] = nibs.0;\n        nibbles[i * 2 + 1] = nibs.1;\n    }\n    nibbles\n}\n\npub fn byte_to_nibbles(b: u8) -> (u8, u8) {\n    let upper = b >> 4;\n    let lower = b - 16 * upper;\n\n    (upper, lower)\n}\n","path":"/Users/kartik/projects/anoncast/packages/zk/circuits/lib/src/bytes/mod.nr"},"75":{"source":"use dep::std::wrapping_sub;\n\npub global RLP_HEADER_TYPE_STRING = 0;\npub global RLP_HEADER_TYPE_LIST = 1;\n\npub struct RlpFragment {\n    pub offset: u32,\n    pub length: u32,\n    pub data_type: u32,\n}\n\npub unconstrained fn decode_rlp_list_fragments<let NODE_LEN: u32, let MAX_FIELDS: u32>(\n    rlp_header: RlpFragment,\n    node: [u8; NODE_LEN],\n) -> BoundedVec<RlpFragment, MAX_FIELDS> {\n    let mut rlp_list = BoundedVec::new();\n    let mut curr_offset = rlp_header.offset;\n    for _ in 0..MAX_FIELDS {\n        if (curr_offset < node.len()) {\n            let field_prefix = node[curr_offset];\n\n            let field_offset = if field_prefix < 0x80 { 0 } else { 1 };\n            let field_length = if field_prefix < 0x80 {\n                1\n            } else {\n                wrapping_sub(field_prefix as u32, 0x80)\n            };\n\n            rlp_list.push(\n                RlpFragment {\n                    offset: curr_offset + field_offset,\n                    length: field_length,\n                    data_type: RLP_HEADER_TYPE_STRING,\n                },\n            );\n\n            curr_offset += field_length + field_offset;\n        }\n    }\n\n    rlp_list\n}\n\npub unconstrained fn decode_rlp_header<let NODE_LEN: u32>(node: [u8; NODE_LEN]) -> RlpFragment {\n    let (prefix, data) = node.as_slice().pop_front();\n\n    if (prefix < 0x80) {\n        // 1 byte\n        RlpFragment { offset: 0 as u32, length: 1 as u32, data_type: RLP_HEADER_TYPE_STRING }\n    } else if (prefix < 0xb8) {\n        // 0-55 byte string\n        RlpFragment {\n            offset: 1,\n            length: wrapping_sub(prefix, 0x80) as u32,\n            data_type: RLP_HEADER_TYPE_STRING,\n        }\n    } else if (prefix < 0xc0) {\n        // > 55 byte string\n        RlpFragment {\n            offset: wrapping_sub(1 + prefix, 0xb7) as u32,\n            length: extract_payload_len(data, wrapping_sub(prefix, 0xb7) as u32),\n            data_type: RLP_HEADER_TYPE_STRING,\n        }\n    } else if (prefix < 0xf8) {\n        // 0-55 byte array\n        RlpFragment {\n            offset: 1,\n            length: wrapping_sub(prefix, 0xc0) as u32,\n            data_type: RLP_HEADER_TYPE_LIST,\n        }\n    } else {\n        // > 55 byte array\n        RlpFragment {\n            offset: wrapping_sub(1 + prefix, 0xf7) as u32,\n            length: extract_payload_len(data, wrapping_sub(prefix, 0xf7) as u32),\n            data_type: RLP_HEADER_TYPE_LIST,\n        }\n    }\n}\n\nfn extract_payload_len(data: [u8], len: u32) -> u32 {\n    let data_len = data.len();\n    let mut node_len = 0;\n    for i in 0..2 {\n        if (i < len & i < data_len) {\n            node_len = data[i] as u32 + node_len * 256;\n        }\n    }\n\n    node_len\n}\n\npub fn encode_rlp_string<let N: u32>(data: [u8; N]) -> [u8; N] {\n    let length = data.len();\n    let mut result = [0; N];\n\n    // Find first non-zero byte using for loop\n    let mut start_idx = 0;\n    for i in 0..N {\n        if (start_idx == 0) & (data[i] != 0) {\n            start_idx = i;\n        }\n    }\n\n    // If all zeros, return single zero byte\n    if (start_idx == 0) & (data[0] == 0) {\n        result[0] = 0x80;\n        result\n    }\n\n    let actual_length = length - start_idx;\n\n    if (actual_length == 1) & (data[start_idx] < 0x80) {\n        // Single byte < 0x80\n        result[0] = data[start_idx];\n    } else {\n        // 0-55 bytes string\n        result[0] = (0x80 + actual_length) as u8;\n        for i in 0..N {\n            if i < actual_length {\n                result[i + 1] = data[start_idx + i];\n            }\n        }\n    }\n\n    result\n}\n","path":"/Users/kartik/projects/anoncast/packages/zk/circuits/lib/src/rlp/mod.nr"}},"names":["main"],"brillig_names":["get_key_hash","decode_rlp_header","get_node_hash","decode_rlp_list_fragments","copy","decode_rlp_header","get_node_hash","decode_rlp_list_fragments","field_less_than","decompose_hint","lte_hint","directive_invert","directive_integer_quotient"]}