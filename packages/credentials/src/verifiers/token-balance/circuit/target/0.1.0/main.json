{"noir_version":"0.38.0+e784523a15c0c233a5a794f28498635b7ce86325","hash":8432515108242613931,"abi":{"parameters":[{"name":"signature","type":{"kind":"array","length":64,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"message_hash","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"pub_key_x","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"pub_key_y","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"storage_hash","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"storage_nodes","type":{"kind":"array","length":5,"type":{"kind":"array","length":532,"type":{"kind":"integer","sign":"unsigned","width":8}}},"visibility":"private"},{"name":"storage_leaf","type":{"kind":"array","length":69,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"storage_depth","type":{"kind":"integer","sign":"unsigned","width":64},"visibility":"private"},{"name":"storage_value","type":{"kind":"field"},"visibility":"private"},{"name":"chain_id","type":{"kind":"field"},"visibility":"private"},{"name":"block_number","type":{"kind":"field"},"visibility":"private"},{"name":"token_address","type":{"kind":"field"},"visibility":"private"},{"name":"balance_slot","type":{"kind":"field"},"visibility":"private"},{"name":"verified_balance","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"tuple","fields":[{"kind":"field"},{"kind":"field"},{"kind":"field"},{"kind":"field"},{"kind":"field"},{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}}]},"visibility":"public"},"error_types":{}},"bytecode":"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","debug_symbols":"","file_map":{"6":{"source":"use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: StructDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: StructDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                let result_i = self[i].cmp(other[i]);\n\n                if result_i == Ordering::less() {\n                    result = result_i;\n                } else if result_i == Ordering::greater() {\n                    result = result_i;\n                }\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                let result_i = self[i].cmp(other[i]);\n\n                if result_i == Ordering::less() {\n                    result = result_i;\n                } else if result_i == Ordering::greater() {\n                    result = result_i;\n                }\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n","path":"std/cmp.nr"},"7":{"source":"use crate::{cmp::Eq, convert::From};\n\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\n/// slices - and thus nested vectors as well - are disallowed).\n///\n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\n/// pushing an additional element is also more efficient - the length only needs to be increased\n/// by one.\n///\n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\n/// is a reasonable maximum bound that can be placed on the vector.\n///\n/// Example:\n///\n/// ```noir\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\n/// for i in 0..5 {\n///     vector.push(i);\n/// }\n/// assert(vector.len() == 5);\n/// assert(vector.max_len() == 10);\n/// ```\npub struct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    /// Creates a new, empty vector of length zero.\n    ///\n    /// Since this container is backed by an array internally, it still needs an initial value\n    /// to give each element. To resolve this, each element is zeroed internally. This value\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\n    /// assert(empty_vector.len() == 0);\n    /// ```\n    ///\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\n    /// via a type signature:\n    ///\n    /// ```noir\n    /// fn good() -> BoundedVec<Field, 10> {\n    ///     // Ok! MaxLen is specified with a type annotation\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\n    ///     let v2 = BoundedVec::new();\n    ///\n    ///     // Ok! MaxLen is known from the type of `good`'s return value\n    ///     v2\n    /// }\n    ///\n    /// fn bad() {\n    ///     // Error: Type annotation needed\n    ///     // The compiler can't infer `MaxLen` from the following code:\n    ///     let mut v3 = BoundedVec::new();\n    ///     v3.push(5);\n    /// }\n    /// ```\n    ///\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a\n    /// constraint failure at runtime when the vec is pushed to.\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this\n    /// will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     let last = v.get(v.len() - 1);\n    ///     assert(first != last);\n    /// }\n    /// ```\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero, without\n    /// performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element,\n    /// it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\n    ///     // Always ensure the length is larger than the largest\n    ///     // index passed to get_unchecked\n    ///     assert(v.len() > 2);\n    ///     let first = v.get_unchecked(0);\n    ///     let second = v.get_unchecked(1);\n    ///     let third = v.get_unchecked(2);\n    ///     first + second + third\n    /// }\n    /// ```\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     assert(first != 42);\n    ///     v.set(0, 42);\n    ///     let new_first = v.get(0);\n    ///     assert(new_first == 42);\n    /// }\n    /// ```\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn set_unchecked_example() {\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n    ///     vec.extend_from_array([1, 2]);\n    ///\n    ///     // Here we're safely writing within the valid range of `vec`\n    ///     // `vec` now has the value [42, 2]\n    ///     vec.set_unchecked(0, 42);\n    ///\n    ///     // We can then safely read this value back out of `vec`.\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\n    ///     assert_eq(vec.get(0), 42);\n    ///\n    ///     // We've now written past the end of `vec`.\n    ///     // As this index is still within the maximum potential length of `v`,\n    ///     // it won't cause a constraint failure.\n    ///     vec.set_unchecked(2, 42);\n    ///     println(vec);\n    ///\n    ///     // This will write past the end of the maximum potential length of `vec`,\n    ///     // it will then trigger a constraint failure.\n    ///     vec.set_unchecked(5, 42);\n    ///     println(vec);\n    /// }\n    /// ```\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    /// Pushes an element to the end of the vector. This increases the length\n    /// of the vector by one.\n    ///\n    /// Panics if the new length of the vector will be greater than the max length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    ///\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// // Panics with failed assertion \"push out of bounds\"\n    /// v.push(3);\n    /// ```\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    /// Returns the current length of this vector\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\n    /// assert(v.len() == 0);\n    ///\n    /// v.push(100);\n    /// assert(v.len() == 1);\n    ///\n    /// v.push(200);\n    /// v.push(300);\n    /// v.push(400);\n    /// assert(v.len() == 4);\n    ///\n    /// let _ = v.pop();\n    /// let _ = v.pop();\n    /// assert(v.len() == 2);\n    /// ```\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    /// Returns the maximum length of this vector. This is always\n    /// equal to the `MaxLen` parameter this vector was initialized with.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.max_len() == 5);\n    /// v.push(10);\n    /// assert(v.max_len() == 5);\n    /// ```\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    /// Returns the internal array within this vector.\n    ///\n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\n    /// the storage held internally by this vector.\n    ///\n    /// Note that uninitialized elements may be zeroed out!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\n    ///\n    /// v.push(57);\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\n    /// ```\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    /// Pushes each element from the given array to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_array([2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the given slice to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_slice(&[2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the other vector to this vector. The length of\n    /// the other vector is left unchanged.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// ```noir\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\n    ///\n    /// v2.extend_from_array([1, 2, 3]);\n    /// v1.extend_from_bounded_vec(v2);\n    ///\n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\n    /// ```\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        let mut exceeded_len = false;\n        for i in 0..Len {\n            exceeded_len |= i == append_len;\n            if !exceeded_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        }\n        self.len = new_len;\n    }\n\n    /// Creates a new vector, populating it with values derived from an array input.\n    /// The maximum length of the vector is determined based on the type signature.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\n    /// ```\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    /// Pops the element at the end of the vector. This will decrease the length\n    /// of the vector by one.\n    ///\n    /// Panics if the vector is empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// let two = v.pop();\n    /// let one = v.pop();\n    ///\n    /// assert(two == 2);\n    /// assert(one == 1);\n    ///\n    /// // error: cannot pop from an empty vector\n    /// let _ = v.pop();\n    /// ```\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    /// Returns true if the given predicate returns true for any element\n    /// in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\n    /// v.extend_from_array([2, 4, 6]);\n    ///\n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\n    /// assert(all_even);\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if !exceeded_len {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.map(|value| value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n        for i in 0..MaxLen {\n            if i < self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        }\n        ret\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n        (self.len == other.len) & (self.storage == other.storage)\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.storage()[2], 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage()[0], 1);\n            assert_eq(bounded_vec.storage()[1], 2);\n            assert_eq(bounded_vec.storage()[2], 3);\n        }\n\n        #[test(should_fail_with = \"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.storage()[0], 1);\n            assert_eq(bounded_vec.storage()[1], 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n}\n","path":"std/collections/bounded_vec.nr"},"25":{"source":"use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\nglobal TWO_POW_64: Field = 0x10000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(mut x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 64 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low_lower_64 = (x as u64) as Field;\n    x = (x - low_lower_64) / TWO_POW_64;\n    let low_upper_64 = (x as u64) as Field;\n\n    let high = (x - low_upper_64) / TWO_POW_64;\n    let low = low_upper_64 * TWO_POW_64 + low_lower_64;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(unsafe { field_less_than(b, a) });\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        // Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n","path":"std/field/bn254.nr"},"26":{"source":"pub mod bn254;\nuse crate::runtime::is_unconstrained;\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        assert(BIT_SIZE < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_le_bits\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_be_bits\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n","path":"std/field/mod.nr"},"27":{"source":"use crate::runtime::is_unconstrained;\n\nglobal BLOCK_SIZE_IN_BYTES: u32 = 136; //(1600 - BITS * 2) / WORD_SIZE;\nglobal WORD_SIZE: u32 = 8; // Limbs are made up of u64s so 8 bytes each.\nglobal LIMBS_PER_BLOCK: u32 = BLOCK_SIZE_IN_BYTES / WORD_SIZE;\nglobal NUM_KECCAK_LANES: u32 = 25;\n\n#[foreign(keccakf1600)]\nfn keccakf1600(input: [u64; 25]) -> [u64; 25] {}\n\n#[no_predicates]\npub(crate) fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32] {\n    assert(N >= message_size);\n\n    // Copy input to block bytes. For that we'll need at least input bytes (N)\n    // but we want it to be padded to a multiple of BLOCK_SIZE_IN_BYTES.\n    let mut block_bytes = [0; ((N / BLOCK_SIZE_IN_BYTES) + 1) * BLOCK_SIZE_IN_BYTES];\n    if is_unconstrained() {\n        for i in 0..message_size {\n            block_bytes[i] = input[i];\n        }\n    } else {\n        for i in 0..N {\n            if i < message_size {\n                block_bytes[i] = input[i];\n            }\n        }\n    }\n\n    //1. format_input_lanes\n    let max_blocks = (N + BLOCK_SIZE_IN_BYTES) / BLOCK_SIZE_IN_BYTES;\n    //maximum number of bytes to hash\n    let real_max_blocks = (message_size + BLOCK_SIZE_IN_BYTES) / BLOCK_SIZE_IN_BYTES;\n    let real_blocks_bytes = real_max_blocks * BLOCK_SIZE_IN_BYTES;\n\n    block_bytes[message_size] = 1;\n    block_bytes[real_blocks_bytes - 1] = 0x80;\n\n    // populate a vector of 64-bit limbs from our byte array\n    let mut sliced_buffer =\n        [0; (((N / BLOCK_SIZE_IN_BYTES) + 1) * BLOCK_SIZE_IN_BYTES) / WORD_SIZE];\n    for i in 0..sliced_buffer.len() {\n        let limb_start = WORD_SIZE * i;\n\n        let mut sliced = 0;\n        let mut v = 1;\n        for k in 0..WORD_SIZE {\n            sliced += v * (block_bytes[limb_start + k] as Field);\n            v *= 256;\n        }\n\n        sliced_buffer[i] = sliced as u64;\n    }\n\n    //2. sponge_absorb\n    let mut state: [u64; NUM_KECCAK_LANES] = [0; NUM_KECCAK_LANES];\n    // When in an unconstrained runtime we can take advantage of runtime loop bounds,\n    // thus allowing us to simplify the loop body.\n    if is_unconstrained() {\n        for i in 0..real_max_blocks {\n            if (i == 0) {\n                for j in 0..LIMBS_PER_BLOCK {\n                    state[j] = sliced_buffer[j];\n                }\n            } else {\n                for j in 0..LIMBS_PER_BLOCK {\n                    state[j] = state[j] ^ sliced_buffer[i * LIMBS_PER_BLOCK + j];\n                }\n            }\n            state = keccakf1600(state);\n        }\n    } else {\n        // `real_max_blocks` is guaranteed to at least be `1`\n        // We peel out the first block as to avoid a conditional inside of the loop.\n        // Otherwise, a dynamic predicate can cause a blowup in a constrained runtime.\n        for j in 0..LIMBS_PER_BLOCK {\n            state[j] = sliced_buffer[j];\n        }\n        state = keccakf1600(state);\n        for i in 1..max_blocks {\n            if i < real_max_blocks {\n                for j in 0..LIMBS_PER_BLOCK {\n                    state[j] = state[j] ^ sliced_buffer[i * LIMBS_PER_BLOCK + j];\n                }\n                state = keccakf1600(state);\n            }\n        }\n    }\n\n    //3. sponge_squeeze\n    let mut result = [0; 32];\n    for i in 0..4 {\n        let lane = state[i] as Field;\n        let lane_le: [u8; 8] = lane.to_le_bytes();\n        for j in 0..8 {\n            result[8 * i + j] = lane_le[j];\n        }\n    }\n    result\n}\n\nmod tests {\n    use super::keccak256;\n\n    #[test]\n    fn smoke_test() {\n        let input = [0xbd];\n        let result = [\n            0x5a, 0x50, 0x2f, 0x9f, 0xca, 0x46, 0x7b, 0x26, 0x6d, 0x5b, 0x78, 0x33, 0x65, 0x19,\n            0x37, 0xe8, 0x05, 0x27, 0x0c, 0xa3, 0xf3, 0xaf, 0x1c, 0x0d, 0xd2, 0x46, 0x2d, 0xca,\n            0x4b, 0x3b, 0x1a, 0xbf,\n        ];\n        assert_eq(keccak256(input, input.len()), result);\n    }\n\n    #[test]\n    fn hash_hello_world() {\n        let input = \"Hello world!\".as_bytes();\n        let result = [\n            0xec, 0xd0, 0xe1, 0x8, 0xa9, 0x8e, 0x19, 0x2a, 0xf1, 0xd2, 0xc2, 0x50, 0x55, 0xf4, 0xe3,\n            0xbe, 0xd7, 0x84, 0xb5, 0xc8, 0x77, 0x20, 0x4e, 0x73, 0x21, 0x9a, 0x52, 0x3, 0x25, 0x1f,\n            0xea, 0xab,\n        ];\n        assert_eq(keccak256(input, input.len()), result);\n    }\n\n    #[test]\n    fn var_size_hash() {\n        let input = [\n            189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205,\n            206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222,\n            223,\n        ];\n        let result = [\n            226, 37, 115, 94, 94, 196, 72, 116, 194, 105, 79, 233, 65, 12, 30, 94, 181, 131, 170,\n            219, 171, 166, 236, 88, 143, 67, 255, 160, 248, 214, 39, 129,\n        ];\n        assert_eq(keccak256(input, 13), result);\n    }\n\n    #[test]\n    fn hash_longer_than_136_bytes() {\n        let input = \"123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789\"\n            .as_bytes();\n        assert(input.len() > 136);\n\n        let result = [\n            0x1d, 0xca, 0xeb, 0xdf, 0xd9, 0xd6, 0x24, 0x67, 0x1c, 0x18, 0x16, 0xda, 0xd, 0x8a, 0xeb,\n            0xa8, 0x75, 0x71, 0x2c, 0xc, 0x89, 0xe0, 0x25, 0x2, 0xe8, 0xb6, 0x5e, 0x16, 0x5, 0x55,\n            0xe4, 0x40,\n        ];\n        assert_eq(keccak256(input, input.len()), result);\n    }\n}\n","path":"std/hash/keccak.nr"},"28":{"source":"pub mod poseidon;\npub mod poseidon2;\npub mod keccak;\npub mod sha256;\npub mod sha512;\n\nuse crate::default::Default;\nuse crate::embedded_curve_ops::{\n    EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_array_return,\n};\nuse crate::meta::derive_via;\nuse crate::uint128::U128;\n\n// Kept for backwards compatibility\npub use sha256::{digest, sha256, sha256_compression, sha256_var};\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[inline_always]\npub fn pedersen_commitment_with_separator<let N: u32>(\n    input: [Field; N],\n    separator: u32,\n) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[no_predicates]\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: [EmbeddedCurveScalar; N + 1] = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N + 1];\n    let mut generators: [EmbeddedCurvePoint; N + 1] =\n        [EmbeddedCurvePoint::point_at_infinity(); N + 1];\n    let domain_generators: [EmbeddedCurvePoint; N] =\n        derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n\n    for i in 0..N {\n        scalars[i] = from_field_unsafe(input[i]);\n        generators[i] = domain_generators[i];\n    }\n    scalars[N] = EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field };\n\n    let length_generator: [EmbeddedCurvePoint; 1] =\n        derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    generators[N] = length_generator[0];\n    multi_scalar_mul_array_return(generators, scalars)[0]\n}\n\n#[field(bn254)]\n#[inline_always]\npub fn derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n// Same as from_field but:\n// does not assert the limbs are 128 bits\n// does not assert the decomposition does not overflow the EmbeddedCurveScalar\nfn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    let (xlo, xhi) = unsafe { crate::field::bn254::decompose_hint(scalar) };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n// docs:start:keccak256\npub fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{\n    crate::hash::keccak::keccak256(input, message_size)\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: StructDefinition) -> Quoted {\n    let name = quote { Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: std::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(\n        s,\n        name,\n        signature,\n        for_each_field,\n        quote {},\n        |fields| fields,\n    )\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher<H>\nwhere\n    H: Hasher,\n{\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H)\n    where\n        H: Hasher,\n    {}\n}\n\nimpl Hash for U128 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self.lo as Field);\n        H::write(state, self.hi as Field);\n    }\n}\n\nimpl<T, let N: u32> Hash for [T; N]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B)\nwhere\n    A: Hash,\n    B: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n    E: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1),\n        0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1),\n        EmbeddedCurvePoint {\n            x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n            y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n            is_infinite: false,\n        },\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2),\n        0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2),\n        EmbeddedCurvePoint {\n            x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n            y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3),\n        0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3),\n        EmbeddedCurvePoint {\n            x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n            y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4),\n        0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4),\n        EmbeddedCurvePoint {\n            x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n            y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5),\n        0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5),\n        EmbeddedCurvePoint {\n            x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n            y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6),\n        0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6),\n        EmbeddedCurvePoint {\n            x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n            y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        EmbeddedCurvePoint {\n            x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n            y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        EmbeddedCurvePoint {\n            x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n            y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        EmbeddedCurvePoint {\n            x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n            y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        EmbeddedCurvePoint {\n            x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n            y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n            is_infinite: false,\n        },\n    );\n}\n","path":"std/hash/mod.nr"},"36":{"source":"pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod merkle;\npub mod schnorr;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod eddsa;\npub mod embedded_curve_ops;\npub mod sha256;\npub mod sha512;\npub mod field;\npub mod ec;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod uint128;\npub mod bigint;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<let N: u32>(predicate: bool, message: str<N>) {}\n\n// from_field and as_field are private since they are not valid for every type.\n// `as` should be the default for users to cast between primitive types, and in the future\n// traits can be used to work with generic types.\n#[builtin(from_field)]\nfn from_field<T>(x: Field) -> T {}\n\n#[builtin(as_field)]\nfn as_field<T>(x: T) -> Field {}\n\npub fn wrapping_add<T>(x: T, y: T) -> T {\n    crate::from_field(crate::as_field(x) + crate::as_field(y))\n}\n\npub fn wrapping_sub<T>(x: T, y: T) -> T {\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    crate::from_field(\n        crate::as_field(x) + 340282366920938463463374607431768211456 - crate::as_field(y),\n    )\n}\n\npub fn wrapping_mul<T>(x: T, y: T) -> T {\n    crate::from_field(crate::as_field(x) * crate::as_field(y))\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\n","path":"std/lib.nr"},"69":{"source":"use dep::lib::{ecrecover, proof};\n\nfn main(\n    // Address Data\n    signature: [u8; 64],\n    message_hash: [u8; 32],\n    pub_key_x: [u8; 32],\n    pub_key_y: [u8; 32],\n    // Storage Proof\n    storage_hash: [u8; 32],\n    storage_nodes: [[u8; 532]; 5],\n    storage_leaf: [u8; 69],\n    storage_depth: u64,\n    storage_value: Field,\n    // Verification Data\n    chain_id: Field,\n    block_number: Field,\n    token_address: Field,\n    balance_slot: Field,\n    // Balance Data\n    verified_balance: Field,\n) -> pub (Field, Field, Field, Field, Field, [u8; 32]) {\n    let balance_slot_bytes: [u8; 32] = balance_slot.to_be_bytes();\n    let address: [u8; 32] =\n        ecrecover::ecrecover(pub_key_x, pub_key_y, signature, message_hash).to_be_bytes();\n\n    let key = proof::get_storage_key([address, balance_slot_bytes]);\n    let value = proof::get_storage_value(storage_value);\n\n    proof::verify(\n        key,\n        value,\n        storage_hash,\n        storage_nodes,\n        storage_leaf,\n        storage_depth,\n    );\n\n    assert(!storage_value.lt(verified_balance), \"Attempt to verify too high balance\");\n\n    (verified_balance, chain_id, block_number, token_address, balance_slot, storage_hash)\n}\n\n#[test]\nfn test_main() {\n    let signature = [\n        0x2d, 0x37, 0xb1, 0x66, 0x31, 0xb6, 0x7c, 0xbe, 0x79, 0xe8, 0xb1, 0x15, 0xcd, 0xa1, 0xee,\n        0x74, 0xdd, 0xe8, 0x49, 0x2b, 0xee, 0xf9, 0xfa, 0xc0, 0x74, 0x67, 0x77, 0xc4, 0x63, 0xe0,\n        0xc8, 0xcc, 0x5c, 0xfd, 0x2c, 0xea, 0x5f, 0x1e, 0x2e, 0x6d, 0x88, 0x99, 0xe4, 0xfe, 0x33,\n        0xab, 0x70, 0x9a, 0x44, 0x9e, 0x26, 0x2c, 0xc9, 0xfc, 0x56, 0xc3, 0xd6, 0x3b, 0x78, 0x9d,\n        0x99, 0x27, 0x09, 0x54,\n    ];\n    let message_hash = [\n        0x9d, 0x44, 0x7d, 0x95, 0x6f, 0x18, 0xf0, 0x6e, 0xfc, 0x4e, 0x1f, 0xa2, 0xb7, 0x15, 0xe6,\n        0xa4, 0x6f, 0xe6, 0x80, 0xd3, 0xd3, 0x5e, 0x1e, 0xbe, 0x90, 0xb9, 0xd5, 0x6a, 0xd1, 0xed,\n        0xdc, 0xa1,\n    ];\n    let pub_key_x = [\n        0x12, 0x09, 0x76, 0x95, 0x85, 0xe7, 0xea, 0x6b, 0x1d, 0x48, 0xfb, 0x8e, 0x7a, 0x49, 0xad,\n        0x4a, 0x68, 0x7f, 0x3f, 0x21, 0x9c, 0x80, 0x2b, 0x16, 0x71, 0x32, 0xb3, 0x45, 0x6a, 0xd8,\n        0xd2, 0xe4,\n    ];\n    let pub_key_y = [\n        0x73, 0x32, 0x84, 0xca, 0x26, 0x7f, 0x3c, 0x5e, 0x6f, 0xa7, 0x5b, 0xad, 0xe8, 0x23, 0xfd,\n        0xab, 0xd5, 0xb4, 0xb6, 0xa9, 0x13, 0x85, 0xd1, 0xa6, 0xde, 0xd7, 0x6c, 0xb5, 0x5d, 0x73,\n        0x61, 0x1c,\n    ];\n    let balance_slot = 0;\n    let verified_balance = 0x27b7c8936148ec1a00001;\n    let storage_value = 0x27b7c8936148ec1a00001;\n    let storage_hash = [\n        0xfe, 0x24, 0x8f, 0x06, 0xea, 0xe1, 0xa1, 0x53, 0xfb, 0x78, 0x4d, 0x20, 0x48, 0x40, 0x71,\n        0x89, 0x2f, 0xc0, 0xcd, 0xcd, 0x8c, 0x7b, 0x76, 0x4c, 0xc6, 0xb4, 0xcf, 0x33, 0xfd, 0x33,\n        0xa5, 0x24,\n    ];\n    let storage_nodes = [\n        [\n            0xf9, 0x02, 0x11, 0xa0, 0x65, 0x4f, 0x43, 0xea, 0xba, 0x96, 0xcf, 0x57, 0x0d, 0xa0,\n            0x12, 0xb1, 0xc6, 0x47, 0xf4, 0xf4, 0x6d, 0x21, 0x0e, 0x9d, 0x96, 0xec, 0x81, 0x87,\n            0x26, 0x8d, 0xd3, 0x04, 0xa0, 0x78, 0xad, 0xb1, 0xa0, 0x27, 0x9e, 0x0a, 0xcb, 0xa7,\n            0xdf, 0x47, 0xd6, 0x00, 0x24, 0xc1, 0x21, 0x0b, 0x0e, 0xe0, 0x6b, 0x70, 0x11, 0x1f,\n            0xf1, 0xae, 0x08, 0x3a, 0x75, 0xe9, 0x2d, 0x07, 0x4c, 0x30, 0x3b, 0x8b, 0x3c, 0xa0,\n            0xf5, 0x9e, 0x78, 0x37, 0x07, 0xfd, 0x10, 0x5f, 0x6c, 0x4f, 0x10, 0x78, 0xfc, 0x2c,\n            0xeb, 0x68, 0xdd, 0xb2, 0x5a, 0x20, 0x10, 0x7f, 0xd5, 0xe6, 0x67, 0x6a, 0x6f, 0xe1,\n            0x6a, 0xed, 0x69, 0x66, 0xa0, 0x73, 0xba, 0x92, 0xc1, 0x7f, 0x06, 0x1b, 0xeb, 0xe2,\n            0xe9, 0x73, 0xc4, 0xdc, 0x40, 0x92, 0xdf, 0xf4, 0xb3, 0x19, 0x35, 0x3d, 0x37, 0xdb,\n            0x6d, 0x84, 0xde, 0x4e, 0x9a, 0xc9, 0x6a, 0xd7, 0x7c, 0xa0, 0x8c, 0xb6, 0xac, 0xfb,\n            0x9e, 0x40, 0x7c, 0x5a, 0x81, 0x47, 0xaa, 0xe8, 0xb6, 0xb3, 0x9e, 0x60, 0xf9, 0xf9,\n            0x36, 0x05, 0x24, 0x5e, 0xe1, 0xd4, 0xfb, 0xec, 0xa3, 0x2d, 0x7c, 0x30, 0x10, 0x43,\n            0xa0, 0xa5, 0x79, 0xf5, 0x94, 0x63, 0xa2, 0xbd, 0x14, 0xf2, 0x90, 0x97, 0x98, 0x68,\n            0xa0, 0x85, 0x48, 0xf1, 0x7b, 0x8a, 0x3b, 0x52, 0x1f, 0x98, 0x0a, 0xfd, 0x63, 0x77,\n            0x5b, 0x4c, 0xea, 0x5d, 0xed, 0xa0, 0x65, 0x4e, 0xa5, 0xea, 0xe7, 0x47, 0x8b, 0x91,\n            0x31, 0x2c, 0x6f, 0x50, 0x1a, 0xa9, 0x73, 0xcd, 0x43, 0xe9, 0xc1, 0xfe, 0x14, 0x2c,\n            0x3f, 0xba, 0x9a, 0xfd, 0x6c, 0x73, 0xac, 0xf8, 0x47, 0x48, 0xa0, 0x6b, 0x34, 0x79,\n            0xc5, 0x03, 0x42, 0x1a, 0xa5, 0x17, 0x1a, 0x2b, 0x08, 0xf6, 0xdc, 0x09, 0x47, 0x99,\n            0xd8, 0x69, 0x6f, 0x37, 0xc0, 0x03, 0xe3, 0x96, 0x65, 0x68, 0x5f, 0xa8, 0x03, 0x5c,\n            0x39, 0xa0, 0xb2, 0x0e, 0x17, 0x69, 0x66, 0x1c, 0xe3, 0x01, 0xbb, 0x52, 0x4c, 0x94,\n            0xd8, 0x07, 0xeb, 0xf3, 0x5e, 0x64, 0xc8, 0x5f, 0xd2, 0x7a, 0xd5, 0x48, 0xb7, 0x37,\n            0x46, 0x89, 0xa5, 0x93, 0x70, 0x37, 0xa0, 0xc9, 0x6b, 0xe2, 0xab, 0xb9, 0x6b, 0xeb,\n            0x11, 0xec, 0xdd, 0xfa, 0xbc, 0x23, 0x79, 0x88, 0x62, 0xbf, 0x92, 0x24, 0xd7, 0xaf,\n            0xd8, 0x92, 0x0a, 0x95, 0x84, 0x14, 0x3f, 0x65, 0x36, 0xa3, 0x01, 0xa0, 0xe1, 0xde,\n            0xfa, 0x28, 0xf4, 0x66, 0x72, 0xea, 0xf6, 0x39, 0x10, 0x6b, 0x3c, 0x4a, 0x72, 0x77,\n            0x71, 0x8d, 0x78, 0xe4, 0xe5, 0x29, 0xc8, 0x83, 0x5d, 0x41, 0x0c, 0x58, 0x8f, 0xda,\n            0x9d, 0xcf, 0xa0, 0xf1, 0x86, 0xde, 0x2f, 0xb4, 0x22, 0xa1, 0x4b, 0x50, 0x7e, 0x7a,\n            0x83, 0xdd, 0x81, 0x58, 0x65, 0xba, 0xa8, 0xe8, 0xe4, 0xb9, 0x33, 0xfd, 0xfd, 0x81,\n            0x82, 0xf8, 0x28, 0x9c, 0x88, 0xce, 0xf3, 0xa0, 0x77, 0x0e, 0x0a, 0x32, 0xe6, 0xf9,\n            0xdc, 0x7f, 0x3d, 0x37, 0xc7, 0xa0, 0x18, 0x47, 0x4b, 0x84, 0xbd, 0xdd, 0x68, 0x7d,\n            0x44, 0x50, 0x31, 0x17, 0x95, 0x0a, 0xb9, 0x03, 0x03, 0xbf, 0xbe, 0x1d, 0xa0, 0xa6,\n            0x7d, 0x8d, 0x6a, 0x30, 0xfa, 0x19, 0xf7, 0x2b, 0xb1, 0x2e, 0x90, 0xb5, 0x69, 0x6c,\n            0x8a, 0xbe, 0xbd, 0x71, 0x64, 0x61, 0x37, 0x91, 0x5f, 0xaa, 0x01, 0x4b, 0xbf, 0x69,\n            0xf1, 0x6c, 0x82, 0xa0, 0xfc, 0x02, 0xbb, 0x26, 0xc9, 0x2d, 0x42, 0x93, 0xc9, 0x7c,\n            0xae, 0xb2, 0x38, 0xeb, 0x71, 0xc2, 0x18, 0x4e, 0xc2, 0x42, 0xa1, 0xae, 0xcb, 0x48,\n            0x96, 0xf8, 0xfb, 0x20, 0xe6, 0xc3, 0xe8, 0x17, 0xa0, 0x06, 0xf9, 0xc9, 0xc5, 0x58,\n            0xa1, 0xe2, 0x92, 0x5a, 0x2b, 0xa8, 0xed, 0x39, 0xe5, 0xe3, 0x13, 0x71, 0xe8, 0xa3,\n            0x4d, 0x1a, 0xb7, 0xb8, 0xe5, 0x3d, 0x2a, 0xef, 0x36, 0x6d, 0xd9, 0xb4, 0x68, 0x80,\n        ],\n        [\n            0xf9, 0x02, 0x11, 0xa0, 0x59, 0xf9, 0x19, 0x11, 0x94, 0x95, 0x9c, 0xd5, 0x6f, 0x85,\n            0x60, 0x1e, 0x5f, 0xa8, 0x4f, 0x43, 0x0d, 0x19, 0xe6, 0x97, 0xac, 0xa2, 0x05, 0xba,\n            0x85, 0x80, 0x9e, 0x95, 0xc6, 0x25, 0x79, 0x07, 0xa0, 0x0b, 0xde, 0xea, 0x0a, 0x72,\n            0x1c, 0xf8, 0x86, 0x19, 0xf6, 0x67, 0x40, 0x81, 0x89, 0x04, 0x32, 0xe6, 0xd0, 0x67,\n            0x42, 0x3d, 0x04, 0x9a, 0xbc, 0xdb, 0x6d, 0xd1, 0x91, 0x4f, 0x97, 0xd2, 0xce, 0xa0,\n            0x8c, 0x05, 0x6a, 0x88, 0x13, 0xcd, 0x3f, 0xb0, 0x71, 0x23, 0x47, 0x86, 0x6d, 0x7e,\n            0x3e, 0xcf, 0x8d, 0x89, 0x6c, 0x8b, 0xe9, 0xe4, 0x45, 0x11, 0x91, 0xbd, 0x93, 0x51,\n            0xb2, 0xe7, 0xcd, 0xad, 0xa0, 0xa0, 0xe3, 0xa7, 0x45, 0x78, 0x37, 0x52, 0xd5, 0x5b,\n            0x47, 0xbe, 0xd2, 0x01, 0x71, 0x2d, 0xab, 0xb8, 0x71, 0xc2, 0xac, 0xb6, 0x70, 0xf9,\n            0x2f, 0xd7, 0xb6, 0xd0, 0x32, 0x6a, 0x18, 0xea, 0xf0, 0xa0, 0xd4, 0x43, 0x4c, 0x0e,\n            0x2a, 0x5a, 0x39, 0x0b, 0x83, 0x8f, 0xcc, 0xc6, 0xf4, 0x06, 0xb5, 0x22, 0x83, 0x1e,\n            0x76, 0x7a, 0x71, 0xe7, 0x49, 0x44, 0x0b, 0x94, 0x59, 0x6b, 0xcc, 0xde, 0xde, 0xba,\n            0xa0, 0xa6, 0xf0, 0x7c, 0xc7, 0x97, 0x75, 0x7d, 0x20, 0xde, 0x26, 0x7d, 0x3f, 0x5f,\n            0x94, 0x66, 0x8a, 0x57, 0x01, 0x0d, 0xca, 0x08, 0x40, 0x4a, 0xfd, 0xe5, 0x87, 0xc5,\n            0xd8, 0x7d, 0x43, 0x7c, 0x2e, 0xa0, 0x26, 0x79, 0x87, 0xbd, 0x89, 0x8a, 0x37, 0x9b,\n            0x0c, 0xdb, 0x7c, 0x71, 0x29, 0x85, 0xcb, 0x04, 0x9b, 0x42, 0xc0, 0x1b, 0x9c, 0x2e,\n            0x8e, 0x6d, 0x95, 0xe8, 0xde, 0xa3, 0x1d, 0x0b, 0xdb, 0xe7, 0xa0, 0xa0, 0x86, 0x60,\n            0x89, 0xdd, 0x0c, 0xb0, 0xdf, 0x1f, 0x13, 0xfc, 0xa9, 0x3a, 0xf8, 0xca, 0xf4, 0x14,\n            0xf9, 0xa9, 0xbc, 0x87, 0xc5, 0x2c, 0x01, 0x89, 0x0b, 0x0d, 0x59, 0x06, 0x3a, 0x30,\n            0x22, 0xa0, 0x34, 0x3a, 0x91, 0xc4, 0x0e, 0xcb, 0x80, 0xa1, 0x94, 0xec, 0xea, 0xc5,\n            0x13, 0x3f, 0x1c, 0xfd, 0x2c, 0x81, 0x9c, 0xf7, 0xbe, 0x12, 0x46, 0x7d, 0x25, 0x25,\n            0x24, 0x61, 0xbc, 0x40, 0x5f, 0x75, 0xa0, 0xc5, 0x31, 0x34, 0x9f, 0xad, 0xdc, 0xfd,\n            0x82, 0x23, 0x66, 0xdd, 0x3b, 0x44, 0x78, 0xc3, 0xe2, 0x32, 0xc9, 0x07, 0x27, 0x65,\n            0x8e, 0x86, 0x5d, 0x07, 0xda, 0xb2, 0x6d, 0x5c, 0x94, 0xea, 0x60, 0xa0, 0x2b, 0xb8,\n            0x7e, 0x12, 0xf9, 0xae, 0xbd, 0x86, 0x0b, 0x78, 0x4d, 0x22, 0x48, 0x84, 0x69, 0x35,\n            0x9b, 0xbd, 0x9e, 0xc3, 0xe6, 0xcc, 0x03, 0x15, 0x45, 0x97, 0xdc, 0x5f, 0xc1, 0x68,\n            0xd7, 0xee, 0xa0, 0xd7, 0xe6, 0x2f, 0x5c, 0xab, 0x31, 0x69, 0x49, 0x70, 0x6b, 0xad,\n            0xa4, 0xee, 0x3a, 0x6d, 0xdb, 0x94, 0x4c, 0x8b, 0x82, 0xd3, 0x62, 0xb0, 0x8a, 0xef,\n            0xa8, 0x5d, 0x35, 0xad, 0x92, 0x22, 0x6c, 0xa0, 0xe9, 0xfe, 0x8c, 0x7c, 0x09, 0x4f,\n            0xdd, 0xab, 0x67, 0x1e, 0x1d, 0xae, 0x52, 0x4b, 0xee, 0xf0, 0xcc, 0x92, 0x15, 0x69,\n            0xf1, 0xbf, 0xb4, 0xd6, 0x6c, 0x35, 0x77, 0x30, 0x2e, 0x05, 0xea, 0xa1, 0xa0, 0x80,\n            0x0e, 0x28, 0x68, 0xa2, 0x9b, 0x41, 0x95, 0x2e, 0xe8, 0x81, 0x85, 0x42, 0x5f, 0xdf,\n            0xfc, 0xa3, 0x18, 0xf2, 0x3e, 0x45, 0x14, 0x66, 0x73, 0x9b, 0x95, 0xd0, 0x55, 0x1d,\n            0xcb, 0x03, 0x35, 0xa0, 0xd2, 0xf1, 0xbe, 0xf7, 0x62, 0x41, 0x6b, 0xa3, 0xe1, 0x5b,\n            0xf7, 0xd9, 0xb7, 0xc0, 0xc7, 0x71, 0x7c, 0xf2, 0x28, 0xb1, 0x7c, 0x4d, 0x92, 0xc7,\n            0xb7, 0x80, 0xb2, 0x14, 0xa8, 0x8f, 0x96, 0xdb, 0xa0, 0x83, 0x41, 0x35, 0x80, 0xf1,\n            0x04, 0x69, 0xa9, 0x6c, 0xf6, 0x1d, 0x3b, 0xa2, 0xc2, 0x88, 0xbb, 0xe4, 0xcb, 0xdc,\n            0x44, 0x03, 0xdc, 0x88, 0x99, 0x1c, 0xda, 0x60, 0xa7, 0x84, 0x02, 0xda, 0x05, 0x80,\n        ],\n        [\n            0xf9, 0x02, 0x11, 0xa0, 0x4a, 0x41, 0x8f, 0xd3, 0x5c, 0xfd, 0xf6, 0x80, 0x65, 0x01,\n            0x2d, 0x8a, 0xf2, 0x4f, 0x23, 0xc8, 0x88, 0x36, 0x80, 0xcf, 0x96, 0xd9, 0x74, 0xe5,\n            0xda, 0x19, 0xa0, 0xf1, 0x66, 0xae, 0x10, 0xb1, 0xa0, 0xda, 0xa8, 0xd2, 0xa5, 0x35,\n            0xaa, 0x65, 0x68, 0xbb, 0x05, 0xe8, 0x47, 0x30, 0xa4, 0x08, 0xef, 0x2b, 0x77, 0x5c,\n            0xaa, 0xf0, 0x48, 0xff, 0x71, 0x73, 0x8f, 0x3a, 0x09, 0xa8, 0x4a, 0x45, 0x2d, 0xa0,\n            0x92, 0xee, 0x80, 0x2f, 0x9d, 0xe7, 0x2b, 0x2c, 0x71, 0x41, 0x6b, 0x75, 0x6f, 0x4b,\n            0xa6, 0x56, 0x5f, 0x56, 0x16, 0xe0, 0x06, 0x2b, 0x7d, 0xe5, 0x3d, 0x82, 0xbd, 0x06,\n            0xd8, 0x14, 0xa4, 0xdb, 0xa0, 0xae, 0xd4, 0xe9, 0x7b, 0x76, 0xe1, 0xda, 0x53, 0x21,\n            0xdb, 0x87, 0x85, 0x11, 0x96, 0x86, 0xf0, 0x15, 0x36, 0x70, 0x29, 0x3e, 0x7b, 0xfc,\n            0xcd, 0xfe, 0x11, 0xf5, 0x28, 0x6c, 0x19, 0x3a, 0xff, 0xa0, 0xb1, 0x71, 0x38, 0x3e,\n            0x58, 0x91, 0xef, 0x23, 0xdd, 0xf8, 0x59, 0xc9, 0x1a, 0x5e, 0xbb, 0xd0, 0x10, 0x7b,\n            0x1b, 0xcd, 0xea, 0x71, 0xf0, 0x57, 0x76, 0x4c, 0x88, 0x09, 0x57, 0xca, 0xe1, 0xcb,\n            0xa0, 0xa4, 0xf4, 0x48, 0xba, 0xc0, 0x6a, 0x3f, 0xbd, 0x78, 0xd0, 0xd4, 0xda, 0xd0,\n            0x8b, 0x8f, 0xff, 0xb8, 0x29, 0x9f, 0x00, 0x30, 0x30, 0xf8, 0x48, 0x89, 0x9f, 0x3b,\n            0xe0, 0x84, 0x72, 0x3a, 0x0c, 0xa0, 0x2d, 0xb3, 0x0a, 0x85, 0xa5, 0x6e, 0x1b, 0xef,\n            0xa9, 0xaa, 0x23, 0x31, 0x96, 0x99, 0xd5, 0x6d, 0x27, 0x0c, 0xcb, 0xda, 0x9e, 0x8f,\n            0x46, 0xd0, 0x9d, 0x66, 0x99, 0xa8, 0x1b, 0x8b, 0x29, 0xf7, 0xa0, 0x0d, 0xeb, 0x1d,\n            0xf8, 0x72, 0x35, 0x9d, 0x2d, 0x8d, 0xc6, 0x8f, 0xec, 0x4e, 0x89, 0x18, 0x93, 0xa1,\n            0xbf, 0xe0, 0x4a, 0x91, 0x30, 0x58, 0x3b, 0xcf, 0xb6, 0xa7, 0x7f, 0xe0, 0xc2, 0x1e,\n            0x80, 0xa0, 0x8f, 0x75, 0x72, 0x16, 0xf1, 0x40, 0x06, 0xd6, 0x4d, 0xce, 0x23, 0x76,\n            0x25, 0x1e, 0x2d, 0xdf, 0xc3, 0x13, 0xeb, 0xa6, 0x38, 0xce, 0xd1, 0xde, 0x5f, 0x14,\n            0xe4, 0x93, 0x56, 0x76, 0x84, 0x23, 0xa0, 0xa2, 0x45, 0x15, 0x96, 0x88, 0x51, 0x27,\n            0x44, 0x8f, 0x3d, 0x61, 0x0c, 0x8a, 0x63, 0x22, 0x85, 0x05, 0x70, 0xf2, 0x21, 0x39,\n            0x57, 0x60, 0x57, 0x72, 0x2d, 0xe9, 0x6a, 0x9a, 0xeb, 0x25, 0xa4, 0xa0, 0x63, 0xd2,\n            0xdd, 0x75, 0x2e, 0xa9, 0x4c, 0x03, 0x33, 0x1a, 0x4d, 0x45, 0x97, 0x92, 0xc2, 0x66,\n            0x6d, 0x15, 0x6c, 0x4b, 0x5f, 0x58, 0x38, 0x01, 0xc1, 0x2f, 0x42, 0xc2, 0x40, 0xee,\n            0x79, 0xd0, 0xa0, 0xd6, 0x2f, 0x4d, 0xf8, 0x19, 0x8b, 0x1c, 0x79, 0x6c, 0xaf, 0x1f,\n            0xe5, 0x2c, 0xeb, 0xab, 0x63, 0x67, 0x9d, 0x06, 0x16, 0x8d, 0xa6, 0x26, 0xdb, 0x04,\n            0x7f, 0x76, 0xa1, 0x39, 0xae, 0x8e, 0x21, 0xa0, 0xf7, 0x6b, 0x3b, 0x27, 0xb0, 0xfc,\n            0x61, 0x2e, 0xb0, 0x54, 0x61, 0xa7, 0x14, 0xe9, 0x22, 0xa6, 0x90, 0xcd, 0x56, 0xe0,\n            0x33, 0x6a, 0x0a, 0x83, 0x9b, 0x20, 0x46, 0xb0, 0xad, 0x24, 0xaa, 0xe2, 0xa0, 0x08,\n            0x8e, 0x66, 0xe3, 0xc7, 0xec, 0x61, 0xc2, 0xd4, 0x5d, 0xd3, 0xce, 0xb3, 0x9c, 0x49,\n            0xc6, 0x50, 0x04, 0x74, 0x7a, 0x65, 0x14, 0x2b, 0xb4, 0x8d, 0x3a, 0x93, 0x03, 0x9f,\n            0x6c, 0x70, 0x73, 0xa0, 0xd5, 0x27, 0x3e, 0x84, 0x4f, 0x01, 0xce, 0x69, 0x11, 0x0d,\n            0xe3, 0x17, 0x91, 0x7d, 0x7d, 0xc1, 0x05, 0xf3, 0x45, 0x9e, 0x8b, 0x70, 0xc9, 0xf2,\n            0xad, 0xd4, 0xec, 0xa8, 0xd4, 0x1c, 0xb1, 0xbc, 0xa0, 0xf0, 0x04, 0x6d, 0x08, 0xb8,\n            0x17, 0x8a, 0x5d, 0x74, 0x13, 0xaf, 0x84, 0xc2, 0xc6, 0x3d, 0x9a, 0xa2, 0xdc, 0x11,\n            0xe5, 0x52, 0x3d, 0x9d, 0x0f, 0x0f, 0x8a, 0x56, 0x6b, 0x49, 0x43, 0x10, 0x09, 0x80,\n        ],\n        [\n            0xf9, 0x01, 0xd1, 0x80, 0xa0, 0x4d, 0xa8, 0xf4, 0xc0, 0x7c, 0x24, 0x30, 0x58, 0x83,\n            0x79, 0xc4, 0x8b, 0x2f, 0x15, 0x75, 0x2d, 0x7f, 0x9b, 0x5c, 0x7a, 0x6d, 0x3e, 0xe6,\n            0x8e, 0x47, 0xa1, 0x1e, 0x5e, 0x22, 0x02, 0x7d, 0x7a, 0xa0, 0x55, 0xf6, 0x1f, 0x55,\n            0x0c, 0xf0, 0xf1, 0xc4, 0xa1, 0xb6, 0xa5, 0xee, 0x4a, 0x4f, 0xd0, 0x25, 0x01, 0x1e,\n            0x57, 0x86, 0x46, 0xbb, 0x33, 0xb9, 0x4d, 0x08, 0x73, 0xcf, 0x45, 0xd8, 0xf6, 0x21,\n            0xa0, 0x13, 0x07, 0x4f, 0x8f, 0x9f, 0x38, 0x0f, 0x4f, 0x91, 0xad, 0xfa, 0xea, 0xf6,\n            0xbe, 0x9f, 0xb2, 0x03, 0x7e, 0x0a, 0x96, 0x4c, 0x91, 0x57, 0x88, 0x62, 0xc9, 0xcd,\n            0x51, 0xdb, 0x57, 0xc9, 0x0f, 0xa0, 0x50, 0xa9, 0x73, 0x64, 0x1b, 0x47, 0x11, 0xec,\n            0x3f, 0xd3, 0xad, 0x36, 0x78, 0x98, 0x9a, 0xc9, 0x81, 0xd6, 0x20, 0x69, 0x6d, 0xc3,\n            0x5d, 0xe3, 0x64, 0x7e, 0x40, 0x66, 0xa8, 0x7f, 0xea, 0x1c, 0xa0, 0x87, 0xa2, 0xb9,\n            0x4b, 0xa7, 0x5a, 0x0c, 0xa4, 0x9a, 0x88, 0xbb, 0xb3, 0xa2, 0xcb, 0xca, 0x70, 0xe2,\n            0xb9, 0x8c, 0xa2, 0x97, 0x30, 0x37, 0x0f, 0x57, 0x6d, 0x8a, 0x4b, 0x1e, 0x53, 0x11,\n            0x99, 0xa0, 0xf2, 0x29, 0x88, 0x55, 0x37, 0x5e, 0xb8, 0xee, 0x8e, 0x16, 0xe4, 0x1b,\n            0x37, 0x9b, 0x41, 0xb0, 0x4f, 0x65, 0xfa, 0xd7, 0x31, 0x2c, 0x58, 0xfa, 0xc3, 0x58,\n            0x3e, 0x5e, 0xcb, 0x61, 0x43, 0x36, 0xa0, 0x41, 0xa2, 0xa0, 0x75, 0xec, 0x7c, 0x55,\n            0xce, 0x0e, 0x90, 0xee, 0x76, 0xd0, 0x81, 0xd7, 0x8f, 0x09, 0xf5, 0x40, 0x94, 0x5d,\n            0xd3, 0x50, 0xc3, 0xe4, 0x4b, 0xc8, 0x09, 0xe8, 0xb6, 0x73, 0xf0, 0x80, 0xa0, 0xe3,\n            0x0b, 0xa6, 0x17, 0xc9, 0x84, 0x0f, 0x40, 0x7a, 0x35, 0x1a, 0x6f, 0xbb, 0xe6, 0x59,\n            0xb5, 0xd1, 0x87, 0x86, 0xe5, 0x4e, 0x00, 0x23, 0x2a, 0xeb, 0x98, 0xa7, 0x1d, 0x94,\n            0x3a, 0x2e, 0xc9, 0xa0, 0x31, 0x26, 0xff, 0x24, 0x92, 0x90, 0xdd, 0x63, 0x45, 0x53,\n            0xf8, 0xe2, 0xb8, 0x3d, 0x5a, 0x0a, 0x14, 0x90, 0x2f, 0xe5, 0x21, 0xb0, 0x27, 0x34,\n            0x62, 0x3a, 0xf0, 0xaf, 0x9d, 0x78, 0x83, 0x3d, 0xa0, 0x03, 0xda, 0x4a, 0xd5, 0xd0,\n            0x6a, 0x6b, 0x1b, 0x0d, 0x30, 0x0a, 0x26, 0x27, 0xb3, 0x97, 0x31, 0xbe, 0xb1, 0x20,\n            0xdd, 0x65, 0x79, 0xab, 0x5b, 0x0e, 0x05, 0xbe, 0xc2, 0xb6, 0x79, 0xe0, 0xac, 0xa0,\n            0xb9, 0x5c, 0xa4, 0x83, 0xae, 0xbc, 0x19, 0xd7, 0x27, 0xfb, 0x40, 0x97, 0xf2, 0x30,\n            0x63, 0x3e, 0x6b, 0x5c, 0xc3, 0x3d, 0xfd, 0x1c, 0xce, 0x94, 0x06, 0x92, 0x13, 0x8f,\n            0x90, 0x2a, 0x2e, 0xf0, 0xa0, 0xfd, 0xdb, 0x15, 0xb6, 0xdf, 0x2c, 0xf5, 0xeb, 0xd7,\n            0x5c, 0x8d, 0x95, 0x55, 0x79, 0x64, 0x4b, 0x5b, 0xdf, 0xf8, 0xcc, 0xd5, 0xe9, 0xbb,\n            0xa7, 0x7f, 0xf8, 0x98, 0x42, 0x08, 0xac, 0xda, 0xff, 0xa0, 0x00, 0x45, 0x70, 0x24,\n            0x66, 0xc4, 0xfb, 0xd2, 0x14, 0xad, 0xba, 0x3c, 0x21, 0xae, 0x4d, 0xde, 0x0d, 0x59,\n            0xf0, 0x33, 0xc7, 0x92, 0xe9, 0x4c, 0xf3, 0xc1, 0xe4, 0x9e, 0xf9, 0x51, 0xfb, 0x27,\n            0xa0, 0xbe, 0x91, 0xef, 0xc6, 0x38, 0x96, 0x28, 0xd9, 0x10, 0xb5, 0x8a, 0xf6, 0x74,\n            0x49, 0xd4, 0x27, 0xb4, 0x2b, 0x8c, 0x30, 0x2d, 0x05, 0xfe, 0x10, 0x98, 0x0b, 0x01,\n            0x37, 0xa0, 0xdb, 0xf3, 0xd0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        ],\n        [\n            0xf8, 0x51, 0x80, 0xa0, 0xbc, 0x43, 0x11, 0x7f, 0x1b, 0x42, 0x1e, 0x4a, 0xd0, 0x7c,\n            0x91, 0xae, 0x86, 0xf5, 0x1a, 0xca, 0x7d, 0x4d, 0x51, 0x46, 0xa7, 0x37, 0x6d, 0x1f,\n            0xff, 0x58, 0x6b, 0xce, 0x02, 0x21, 0xdc, 0x75, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,\n            0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0xa0, 0x58, 0xa9, 0x36, 0xbb, 0xb3, 0xa5, 0x48,\n            0x29, 0xbd, 0x37, 0x12, 0x44, 0xa9, 0x42, 0x81, 0x2e, 0x11, 0x30, 0xc2, 0x85, 0x2b,\n            0x25, 0xe9, 0x85, 0xae, 0xe2, 0xb9, 0xfc, 0x50, 0xa7, 0xd3, 0x47, 0x80, 0x80, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        ],\n    ];\n    let storage_leaf = [\n        0xec, 0x9e, 0x3f, 0x9a, 0x85, 0x4d, 0xe2, 0x83, 0x3f, 0xd2, 0x17, 0x93, 0x51, 0x14, 0x08,\n        0x77, 0xfd, 0x92, 0x0a, 0x15, 0x98, 0x00, 0xdc, 0x1c, 0x13, 0x9b, 0x4e, 0x8e, 0x4b, 0x59,\n        0x65, 0x7b, 0x8c, 0x8b, 0x02, 0x7b, 0x7c, 0x89, 0x36, 0x14, 0x8e, 0xc1, 0xa0, 0x00, 0x01,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    ];\n    let storage_depth = 6;\n\n    main(\n        signature,\n        message_hash,\n        pub_key_x,\n        pub_key_y,\n        storage_hash,\n        storage_nodes,\n        storage_leaf,\n        storage_depth,\n        storage_value,\n        8453,\n        0,\n        0x0000000000000000000000000000000000000000,\n        balance_slot,\n        verified_balance,\n    );\n}\n","path":"/Users/kartik/projects/anoncast/packages/zk/circuits/erc20-balance/src/main.nr"},"71":{"source":"use crate::bytes::{byte_to_nibbles, bytes_as_nibbles};\nuse crate::rlp::{\n    decode_rlp_header, decode_rlp_list_fragments, encode_rlp_string, RLP_HEADER_TYPE_LIST,\n    RlpFragment,\n};\nuse dep::std::hash::keccak256;\n\npub fn verify(\n    key: [u8; 32],\n    value: [u8; 32],\n    storage_hash: [u8; 32],\n    nodes: [[u8; 532]; 5],\n    leaf: [u8; 69],\n    depth: u64,\n) {\n    let key = keccak256(key, 32);\n    let nibbles = bytes_as_nibbles(key);\n\n    let mut key_index = 0;\n    let mut curr_hash = storage_hash;\n    for i in 0..5 {\n        if i < depth - 1 {\n            let node = nodes[i];\n\n            // Decode RLP header\n            let rlp_header = decode_rlp_header(node);\n            assert(rlp_header.data_type == RLP_HEADER_TYPE_LIST, \"Invalid data type\");\n\n            // Validate node hash\n            let node_hash: [u8; 32] = get_node_hash(rlp_header, node);\n            assert(node_hash == curr_hash, \"Invalid hash\");\n\n            // Create next hash\n            let rlp_list: BoundedVec<RlpFragment, 17> = decode_rlp_list_fragments(rlp_header, node);\n            if rlp_list.len() == 17 {\n                // Branch Node\n                let curr_nibble = nibbles[key_index] as u32;\n                let rlp_item = rlp_list.get(curr_nibble);\n                assert(rlp_item.length == 32, \"Invalid length\");\n                for i in 0..32 {\n                    curr_hash[i] = node[rlp_item.offset + i];\n                }\n                key_index += 1;\n            } else if rlp_list.len() == 2 {\n                // TODO: Extension Node\n            }\n        }\n    }\n\n    // Verify leaf\n    let rlp_header = decode_rlp_header(leaf);\n    assert(rlp_header.data_type == RLP_HEADER_TYPE_LIST, \"Invalid data type\");\n\n    let resolved_hash = get_node_hash(rlp_header, leaf);\n    assert(resolved_hash == curr_hash, \"Invalid hash\");\n\n    let rlp_list: BoundedVec<RlpFragment, 2> = decode_rlp_list_fragments(rlp_header, leaf);\n    assert(rlp_list.len() == 2, \"Invalid length\");\n\n    let leaf_key_item = rlp_list.get(0);\n    let mut leaf_key_part: [u8; 30] = [0; 30];\n    for i in 0..30 {\n        leaf_key_part[i] = leaf[leaf_key_item.offset + i];\n    }\n    let (leaf_key_prefix, leaf_key) = bytes_as_nibbles(leaf_key_part).as_slice().pop_front();\n    assert((leaf_key_prefix == 2) | (leaf_key_prefix == 3), \"Leaf parity prefix must be 2 or 3\");\n\n    let mut leaf_key_ending: [u8; 59] = [0; 59];\n    for i in 0..59 {\n        if key_index + i < nibbles.len() {\n            leaf_key_ending[i] = nibbles[key_index + i];\n        }\n    }\n    assert(leaf_key.as_array() == leaf_key_ending, \"Key mismatch in the leaf\");\n\n    key_index += leaf_key.len();\n    assert(key_index == nibbles.len(), \"Expected to consume all key nibbles\");\n\n    let leaf_value = rlp_list.get(1);\n    for i in 0..32 {\n        assert(leaf[leaf_value.offset + i] == value[i], \"Value mismatch\");\n    }\n}\n\nunconstrained fn get_node_hash<let NODE_LEN: u32>(\n    rlp_header: RlpFragment,\n    node: [u8; NODE_LEN],\n) -> [u8; 32] {\n    let node_len = rlp_header.length + rlp_header.offset;\n    let resolved_hash: [u8; 32] = keccak256(node, node_len);\n    resolved_hash\n}\n\npub fn get_storage_key<let N: u32>(values: [[u8; 32]; N]) -> [u8; 32] {\n    let mut input: [u8; N * 32] = [0; N * 32];\n    for i in 0..N {\n        for j in 0..32 {\n            input[i * 32 + j] = values[i][j];\n        }\n    }\n    let key = keccak256(input, input.len());\n    key\n}\n\npub fn get_storage_value(field: Field) -> [u8; 32] {\n    let value_bytes: [u8; 32] = field.to_be_bytes();\n    let value_rlp = encode_rlp_string(value_bytes);\n    value_rlp\n}\n","path":"/Users/kartik/projects/anoncast/packages/zk/circuits/lib/src/proof/mod.nr"},"72":{"source":"mod secp256k1;\n\npub fn ecrecover(\n    pub_key_x: [u8; 32],\n    pub_key_y: [u8; 32],\n    signature: [u8; 64], // clip v value\n    hashed_message: [u8; 32],\n) -> Field {\n    let key = secp256k1::PubKey::from_xy(pub_key_x, pub_key_y);\n\n    assert(key.verify_sig(signature, hashed_message));\n    let addr = key.to_eth_address();\n\n    addr\n}\n\n#[test]\nfn test_ecrecover() {\n    let pub_key_x = [\n        131, 24, 83, 91, 84, 16, 93, 74, 122, 174, 96, 192, 143, 196, 95, 150, 135, 24, 27, 79, 223,\n        198, 37, 189, 26, 117, 63, 167, 57, 127, 237, 117,\n    ];\n    let pub_key_y = [\n        53, 71, 241, 28, 168, 105, 102, 70, 242, 243, 172, 176, 142, 49, 1, 106, 250, 194, 62, 99,\n        12, 93, 17, 245, 159, 97, 254, 245, 123, 13, 42, 165,\n    ];\n    let signature = [\n        57, 17, 112, 239, 241, 30, 64, 157, 170, 50, 85, 145, 156, 69, 226, 85, 147, 164, 10, 82,\n        71, 93, 42, 132, 200, 220, 161, 255, 95, 241, 211, 141, 81, 7, 150, 25, 25, 27, 162, 213,\n        80, 61, 12, 170, 50, 4, 154, 203, 252, 229, 119, 29, 202, 153, 50, 25, 126, 145, 245, 23,\n        136, 75, 29, 177,\n    ];\n    let hashed_message = [\n        13, 82, 120, 60, 76, 186, 215, 235, 175, 126, 185, 67, 252, 100, 143, 82, 130, 165, 32, 112,\n        68, 47, 193, 141, 141, 209, 109, 219, 47, 203, 175, 102,\n    ];\n\n    let addr = ecrecover(pub_key_x, pub_key_y, signature, hashed_message);\n    assert(addr == 0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266);\n}\n","path":"/Users/kartik/projects/anoncast/packages/zk/circuits/lib/src/ecrecover/mod.nr"},"73":{"source":"use dep::std;\n\nuse dep::array_helpers;\n\nstruct PubKey {\n    pub_x: [u8; 32],\n    pub_y: [u8; 32],\n}\n\nfn split_uncompressed_pub_key(pub_key: [u8; 65]) -> ([u8; 32], [u8; 32]) {\n    let mut pub_key_x: [u8; 32] = [0; 32];\n    let mut pub_key_y: [u8; 32] = [0; 32];\n\n    for i in 0..32 {\n        pub_key_x[i] = pub_key[i + 1];\n        pub_key_y[i] = pub_key[i + 32 + 1];\n    }\n\n    (pub_key_x, pub_key_y)\n}\n\nimpl PubKey {\n    fn from_xy(pub_x: [u8; 32], pub_y: [u8; 32]) -> PubKey {\n        PubKey { pub_x, pub_y }\n    }\n\n    fn from_unified(pub_key: [u8; 64]) -> PubKey {\n        let (key_x, key_y) = array_helpers::split_u8_64(pub_key);\n\n        PubKey { pub_x: key_x, pub_y: key_y }\n    }\n\n    fn from_uncompressed(pub_key: [u8; 65]) -> PubKey {\n        assert(pub_key[0] == 0x04);\n        let (key_x, key_y) = split_uncompressed_pub_key(pub_key);\n\n        PubKey { pub_x: key_x, pub_y: key_y }\n    }\n\n    fn verify_sig(self, signature: [u8; 64], hashed_message: [u8; 32]) -> bool {\n        std::ecdsa_secp256k1::verify_signature(self.pub_x, self.pub_y, signature, hashed_message)\n    }\n\n    fn to_eth_address(self) -> Field {\n        let pub_key = array_helpers::u8_32_to_u8_64(self.pub_x, self.pub_y);\n        let hashed_pub_key = std::hash::keccak256(pub_key, 64);\n\n        let mut addr: Field = 0;\n        for i in 0..20 {\n            // shift left by 8 and add the new value\n            addr = (addr * 256) + hashed_pub_key[i + 12] as Field;\n        }\n\n        addr\n    }\n\n    fn ecrecover(self, signature: [u8; 64], hashed_message: [u8; 32]) -> Field {\n        assert(self.verify_sig(signature, hashed_message));\n\n        self.to_eth_address()\n    }\n}\n\n#[test]\nfn test_ecrecover_via_key() {\n    let pub_key_x = [\n        131, 24, 83, 91, 84, 16, 93, 74, 122, 174, 96, 192, 143, 196, 95, 150, 135, 24, 27, 79, 223,\n        198, 37, 189, 26, 117, 63, 167, 57, 127, 237, 117,\n    ];\n    let pub_key_y = [\n        53, 71, 241, 28, 168, 105, 102, 70, 242, 243, 172, 176, 142, 49, 1, 106, 250, 194, 62, 99,\n        12, 93, 17, 245, 159, 97, 254, 245, 123, 13, 42, 165,\n    ];\n    let signature = [\n        57, 17, 112, 239, 241, 30, 64, 157, 170, 50, 85, 145, 156, 69, 226, 85, 147, 164, 10, 82,\n        71, 93, 42, 132, 200, 220, 161, 255, 95, 241, 211, 141, 81, 7, 150, 25, 25, 27, 162, 213,\n        80, 61, 12, 170, 50, 4, 154, 203, 252, 229, 119, 29, 202, 153, 50, 25, 126, 145, 245, 23,\n        136, 75, 29, 177,\n    ];\n    let hashed_message = [\n        13, 82, 120, 60, 76, 186, 215, 235, 175, 126, 185, 67, 252, 100, 143, 82, 130, 165, 32, 112,\n        68, 47, 193, 141, 141, 209, 109, 219, 47, 203, 175, 102,\n    ];\n\n    let key = PubKey::from_xy(pub_key_x, pub_key_y);\n    assert(key.ecrecover(signature, hashed_message) == 0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266);\n}\n","path":"/Users/kartik/projects/anoncast/packages/zk/circuits/lib/src/ecrecover/secp256k1.nr"},"74":{"source":"pub fn bytes_as_nibbles<let N: u32>(bytes: [u8; N]) -> [u8; N * 2] {\n    let mut nibbles = [0; N * 2];\n    for i in 0..N {\n        let nibs = byte_to_nibbles(bytes[i]);\n        nibbles[i * 2] = nibs.0;\n        nibbles[i * 2 + 1] = nibs.1;\n    }\n    nibbles\n}\n\npub fn byte_to_nibbles(b: u8) -> (u8, u8) {\n    let upper = b >> 4;\n    let lower = b - 16 * upper;\n\n    (upper, lower)\n}\n","path":"/Users/kartik/projects/anoncast/packages/zk/circuits/lib/src/bytes/mod.nr"},"75":{"source":"use dep::std::wrapping_sub;\n\npub global RLP_HEADER_TYPE_STRING = 0;\npub global RLP_HEADER_TYPE_LIST = 1;\n\npub struct RlpFragment {\n    pub offset: u32,\n    pub length: u32,\n    pub data_type: u32,\n}\n\npub unconstrained fn decode_rlp_list_fragments<let NODE_LEN: u32, let MAX_FIELDS: u32>(\n    rlp_header: RlpFragment,\n    node: [u8; NODE_LEN],\n) -> BoundedVec<RlpFragment, MAX_FIELDS> {\n    let mut rlp_list = BoundedVec::new();\n    let mut curr_offset = rlp_header.offset;\n    for _ in 0..MAX_FIELDS {\n        if (curr_offset < node.len()) {\n            let field_prefix = node[curr_offset];\n\n            let field_offset = if field_prefix < 0x80 { 0 } else { 1 };\n            let field_length = if field_prefix < 0x80 {\n                1\n            } else {\n                wrapping_sub(field_prefix as u32, 0x80)\n            };\n\n            rlp_list.push(\n                RlpFragment {\n                    offset: curr_offset + field_offset,\n                    length: field_length,\n                    data_type: RLP_HEADER_TYPE_STRING,\n                },\n            );\n\n            curr_offset += field_length + field_offset;\n        }\n    }\n\n    rlp_list\n}\n\npub unconstrained fn decode_rlp_header<let NODE_LEN: u32>(node: [u8; NODE_LEN]) -> RlpFragment {\n    let (prefix, data) = node.as_slice().pop_front();\n\n    if (prefix < 0x80) {\n        // 1 byte\n        RlpFragment { offset: 0 as u32, length: 1 as u32, data_type: RLP_HEADER_TYPE_STRING }\n    } else if (prefix < 0xb8) {\n        // 0-55 byte string\n        RlpFragment {\n            offset: 1,\n            length: wrapping_sub(prefix, 0x80) as u32,\n            data_type: RLP_HEADER_TYPE_STRING,\n        }\n    } else if (prefix < 0xc0) {\n        // > 55 byte string\n        RlpFragment {\n            offset: wrapping_sub(1 + prefix, 0xb7) as u32,\n            length: extract_payload_len(data, wrapping_sub(prefix, 0xb7) as u32),\n            data_type: RLP_HEADER_TYPE_STRING,\n        }\n    } else if (prefix < 0xf8) {\n        // 0-55 byte array\n        RlpFragment {\n            offset: 1,\n            length: wrapping_sub(prefix, 0xc0) as u32,\n            data_type: RLP_HEADER_TYPE_LIST,\n        }\n    } else {\n        // > 55 byte array\n        RlpFragment {\n            offset: wrapping_sub(1 + prefix, 0xf7) as u32,\n            length: extract_payload_len(data, wrapping_sub(prefix, 0xf7) as u32),\n            data_type: RLP_HEADER_TYPE_LIST,\n        }\n    }\n}\n\nfn extract_payload_len(data: [u8], len: u32) -> u32 {\n    let data_len = data.len();\n    let mut node_len = 0;\n    for i in 0..2 {\n        if (i < len & i < data_len) {\n            node_len = data[i] as u32 + node_len * 256;\n        }\n    }\n\n    node_len\n}\n\npub fn encode_rlp_string<let N: u32>(data: [u8; N]) -> [u8; N] {\n    let length = data.len();\n    let mut result = [0; N];\n\n    // Find first non-zero byte using for loop\n    let mut start_idx = 0;\n    for i in 0..N {\n        if (start_idx == 0) & (data[i] != 0) {\n            start_idx = i;\n        }\n    }\n\n    // If all zeros, return single zero byte\n    if (start_idx == 0) & (data[0] == 0) {\n        result[0] = 0x80;\n        result\n    }\n\n    let actual_length = length - start_idx;\n\n    if (actual_length == 1) & (data[start_idx] < 0x80) {\n        // Single byte < 0x80\n        result[0] = data[start_idx];\n    } else {\n        // 0-55 bytes string\n        result[0] = (0x80 + actual_length) as u8;\n        for i in 0..N {\n            if i < actual_length {\n                result[i + 1] = data[start_idx + i];\n            }\n        }\n    }\n\n    result\n}\n","path":"/Users/kartik/projects/anoncast/packages/zk/circuits/lib/src/rlp/mod.nr"}},"names":["main"],"brillig_names":["decode_rlp_header","get_node_hash","decode_rlp_list_fragments","decode_rlp_header","get_node_hash","decode_rlp_list_fragments","field_less_than","decompose_hint","lte_hint","directive_invert","directive_integer_quotient"]}